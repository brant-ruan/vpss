From d97d1a07024edabb8dcd9ccf40f9ba31209c36ab Mon Sep 17 00:00:00 2001
From: Mike Drob <mdrob@apache.org>
Date: Mon, 5 Apr 2021 17:31:00 -0500
Subject: [PATCH] SOLR-15249 Attempt to repair security.json ACLs

---
 .../org/apache/solr/cloud/ZkController.java   | 40 +++++++++++++++++--
 ...aramsZkACLAndCredentialsProvidersTest.java | 30 +++++++++++++-
 .../cloud/SecurityAwareZkACLProvider.java     |  2 +-
 3 files changed, 66 insertions(+), 6 deletions(-)

diff --git a/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/solr/core/src/java/org/apache/solr/cloud/ZkController.java
index 475eb4159164..1698565484a3 100644
--- a/solr/core/src/java/org/apache/solr/cloud/ZkController.java
+++ b/solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -79,6 +79,7 @@
 import org.apache.solr.common.cloud.PerReplicaStates;
 import org.apache.solr.common.cloud.PerReplicaStatesOps;
 import org.apache.solr.common.cloud.Replica.Type;
+import org.apache.solr.common.cloud.SecurityAwareZkACLProvider;
 import org.apache.solr.common.cloud.Slice;
 import org.apache.solr.common.cloud.SolrZkClient;
 import org.apache.solr.common.cloud.UrlScheme;
@@ -123,6 +124,7 @@
 import org.apache.zookeeper.Op;
 import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.Watcher;
+import org.apache.zookeeper.data.ACL;
 import org.apache.zookeeper.data.Stat;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -864,11 +866,8 @@ public static void createClusterZkNodes(SolrZkClient zkClient)
     cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);
     cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);
     cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);
-    if (zkClient.getACL(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, true).equals(OPEN_ACL_UNSAFE)) {
-      log.warn("Contents of zookeeper /security.json are world-readable;" +
-          " consider setting up ACLs as described in https://solr.apache.org/guide/zookeeper-access-control.html");
-    }
     bootstrapDefaultConfigSet(zkClient);
+    repairSecurityJson(zkClient);
   }
 
   private static void bootstrapDefaultConfigSet(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {
@@ -908,6 +907,39 @@ public static String getDefaultConfigDirPath() {
     return configDirPath;
   }
 
+  private static void repairSecurityJson(SolrZkClient zkClient) throws KeeperException, InterruptedException {
+    List<ACL> securityConfAcl = zkClient.getACL(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, true);
+    ZkACLProvider aclProvider = zkClient.getZkACLProvider();
+
+    boolean tryUpdate = false;
+
+    if (OPEN_ACL_UNSAFE.equals(securityConfAcl)) {
+      List<ACL> aclToAdd = aclProvider.getACLsToAdd(ZkStateReader.SOLR_SECURITY_CONF_PATH);
+      if (OPEN_ACL_UNSAFE.equals(aclToAdd)) {
+        log.warn("Contents of zookeeper /security.json are world-readable;" +
+            " consider setting up ACLs as described in https://solr.apache.org/guide/zookeeper-access-control.html");
+      } else {
+        tryUpdate = true;
+      }
+    } else if (aclProvider instanceof SecurityAwareZkACLProvider) {
+      // Use Set to explicitly ignore order
+      Set<ACL> nonSecureACL = new HashSet<>(aclProvider.getACLsToAdd(null));
+      // case where security.json was not treated as a secure path
+      if (nonSecureACL.equals(new HashSet<>(securityConfAcl))) {
+        tryUpdate = true;
+      }
+    }
+
+    if (tryUpdate) {
+      if (Boolean.getBoolean("solr.security.aclautorepair.disable")) {
+        log.warn("Detected inconsistent ACLs for zookeeper /security.json, but self-repair is disabled.");
+      } else {
+        log.info("Detected inconsistent ACLs for zookeeper /security.json, attempting to repair.");
+        zkClient.updateACLs(ZkStateReader.SOLR_SECURITY_CONF_PATH);
+      }
+    }
+  }
+
   private void init(CurrentCoreDescriptorProvider registerOnReconnect) {
 
     try {
diff --git a/solr/core/src/test/org/apache/solr/cloud/VMParamsZkACLAndCredentialsProvidersTest.java b/solr/core/src/test/org/apache/solr/cloud/VMParamsZkACLAndCredentialsProvidersTest.java
index b9db03d81740..8e69da52b69a 100644
--- a/solr/core/src/test/org/apache/solr/cloud/VMParamsZkACLAndCredentialsProvidersTest.java
+++ b/solr/core/src/test/org/apache/solr/cloud/VMParamsZkACLAndCredentialsProvidersTest.java
@@ -34,6 +34,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static org.apache.zookeeper.ZooDefs.Ids.OPEN_ACL_UNSAFE;
+
 public class VMParamsZkACLAndCredentialsProvidersTest extends SolrTestCaseJ4 {
   
   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
@@ -163,6 +165,32 @@ public void testReadonlyCredentials() throws Exception {
       zkClient.close();
     }
   }
+
+  @Test
+  public void testRepairACL() throws Exception {
+    clearSecuritySystemProperties();
+    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT)) {
+      // Currently no credentials on ZK connection, because those same VM-params are used for adding ACLs, and here we want
+      // no (or completely open) ACLs added. Therefore hack your way into being authorized for creating anyway
+      zkClient.getSolrZooKeeper().addAuthInfo("digest", ("connectAndAllACLUsername:connectAndAllACLPassword")
+          .getBytes(StandardCharsets.UTF_8));
+
+      zkClient.create("/security.json", "{}".getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, false);
+      assertEquals(OPEN_ACL_UNSAFE, zkClient.getACL("/security.json", null, false));
+    }
+
+    setSecuritySystemProperties();
+    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT)) {
+      ZkController.createClusterZkNodes(zkClient);
+      assertNotEquals(OPEN_ACL_UNSAFE, zkClient.getACL("/security.json", null, false));
+    }
+
+    useReadonlyCredentials();
+    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT)) {
+      NoAuthException e = assertThrows(NoAuthException.class, () -> zkClient.getData("/security.json", null, null, false));
+      assertEquals("/security.json", e.getPath());
+    }
+  }
     
   protected static void doTest(
       SolrZkClient zkClient,
@@ -244,7 +272,7 @@ private void useNoCredentials() {
   private void useWrongCredentials() {
     clearSecuritySystemProperties();
     
-    System.setProperty(SolrZkClient.ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME, VMParamsSingleSetCredentialsDigestZkCredentialsProvider.class.getName());
+    System.setProperty(SolrZkClient.ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME, VMParamsSingleSetCredentialsDigestZkCredentialsProvider.class.getName());
     System.setProperty(VMParamsSingleSetCredentialsDigestZkCredentialsProvider.DEFAULT_DIGEST_USERNAME_VM_PARAM_NAME, "connectAndAllACLUsername");
     System.setProperty(VMParamsSingleSetCredentialsDigestZkCredentialsProvider.DEFAULT_DIGEST_PASSWORD_VM_PARAM_NAME, "connectAndAllACLPasswordWrong");
   }
diff --git a/solr/solrj/src/java/org/apache/solr/common/cloud/SecurityAwareZkACLProvider.java b/solr/solrj/src/java/org/apache/solr/common/cloud/SecurityAwareZkACLProvider.java
index 2fe2da983f72..300c6499b0ed 100644
--- a/solr/solrj/src/java/org/apache/solr/common/cloud/SecurityAwareZkACLProvider.java
+++ b/solr/solrj/src/java/org/apache/solr/common/cloud/SecurityAwareZkACLProvider.java
@@ -33,7 +33,7 @@ public abstract class SecurityAwareZkACLProvider implements ZkACLProvider {
 
 
   @Override
-  public List<ACL> getACLsToAdd(String zNodePath) {
+  public final List<ACL> getACLsToAdd(String zNodePath) {
     if (isSecurityZNodePath(zNodePath)) {
       return getSecurityACLsToAdd();
     } else {
