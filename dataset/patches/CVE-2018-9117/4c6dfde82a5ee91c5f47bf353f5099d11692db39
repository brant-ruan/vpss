From 4c6dfde82a5ee91c5f47bf353f5099d11692db39 Mon Sep 17 00:00:00 2001
From: Tom Akehurst <t.m.akehurst@googlemail.com>
Date: Fri, 23 Mar 2018 12:26:02 +0000
Subject: [PATCH] Disabled downloading of externally referenced DTDs during XML
 parsing and XPath evaluation

---
 .../wiremock/common/ClientError.java          |  1 +
 .../tomakehurst/wiremock/common/Xml.java      | 38 +++++++-
 .../ResponseTemplateTransformer.java          |  4 +-
 .../helpers/HandlebarsXPathHelper.java        |  2 +-
 .../wiremock/matching/EqualToXmlPattern.java  | 18 +---
 .../matching/MatchesXPathPattern.java         |  5 +-
 .../wiremock/XmlHandlingAcceptanceTest.java   | 96 +++++++++++++++++++
 7 files changed, 142 insertions(+), 22 deletions(-)
 create mode 100644 src/test/java/com/github/tomakehurst/wiremock/XmlHandlingAcceptanceTest.java

diff --git a/src/main/java/com/github/tomakehurst/wiremock/common/ClientError.java b/src/main/java/com/github/tomakehurst/wiremock/common/ClientError.java
index 24638e40a8..d2327ddd1e 100644
--- a/src/main/java/com/github/tomakehurst/wiremock/common/ClientError.java
+++ b/src/main/java/com/github/tomakehurst/wiremock/common/ClientError.java
@@ -22,6 +22,7 @@ public class ClientError extends RuntimeException {
     private final Errors errors;
 
     public ClientError(Errors errors) {
+        super(Json.write(errors));
         this.errors = errors;
     }
 
diff --git a/src/main/java/com/github/tomakehurst/wiremock/common/Xml.java b/src/main/java/com/github/tomakehurst/wiremock/common/Xml.java
index 62c9589a3a..3d96d07193 100644
--- a/src/main/java/com/github/tomakehurst/wiremock/common/Xml.java
+++ b/src/main/java/com/github/tomakehurst/wiremock/common/Xml.java
@@ -15,8 +15,11 @@
  */
 package com.github.tomakehurst.wiremock.common;
 
+import com.github.tomakehurst.wiremock.matching.EqualToXmlPattern;
+import com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl;
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;
+import org.xml.sax.EntityResolver;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 import org.xml.sax.XMLReader;
@@ -25,11 +28,13 @@
 import javax.xml.XMLConstants;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.transform.Transformer;
 import javax.xml.transform.TransformerException;
 import javax.xml.transform.TransformerFactory;
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
+import java.io.IOException;
 import java.io.StringReader;
 import java.io.StringWriter;
 
@@ -73,8 +78,7 @@ private static TransformerFactory createTransformerFactory() {
 
     public static Document read(String xml) {
         try {
-            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
-            dbf.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
+            DocumentBuilderFactory dbf = newDocumentBuilderFactory();
             DocumentBuilder db = dbf.newDocumentBuilder();
             InputSource is = new InputSource(new StringReader(xml));
             return db.parse(is);
@@ -86,7 +90,7 @@ public static Document read(String xml) {
     }
 
     public static String toStringValue(Node node) {
-        switch(node.getNodeType()) {
+        switch (node.getNodeType()) {
             case Node.TEXT_NODE:
             case Node.ATTRIBUTE_NODE:
                 return node.getTextContent();
@@ -109,4 +113,32 @@ public static String render(Node node) {
             return throwUnchecked(e, String.class);
         }
     }
+
+    public static DocumentBuilderFactory newDocumentBuilderFactory() {
+        try {
+            DocumentBuilderFactory dbf = new SkipResolvingEntitiesDocumentBuilderFactory();
+            dbf.setFeature("http://xml.org/sax/features/validation", false);
+            dbf.setFeature("http://apache.org/xml/features/nonvalidating/load-dtd-grammar", false);
+            dbf.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
+            return dbf;
+        } catch (ParserConfigurationException e) {
+            return throwUnchecked(e, DocumentBuilderFactory.class);
+        }
+    }
+
+    public static class SkipResolvingEntitiesDocumentBuilderFactory extends DocumentBuilderFactoryImpl {
+        @Override
+        public DocumentBuilder newDocumentBuilder() throws ParserConfigurationException {
+            DocumentBuilder documentBuilder = super.newDocumentBuilder();
+            documentBuilder.setEntityResolver(new SkipResolvingEntitiesDocumentBuilderFactory.ResolveToEmptyString());
+            return documentBuilder;
+        }
+
+        private static class ResolveToEmptyString implements EntityResolver {
+            @Override
+            public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
+                return new InputSource(new StringReader(""));
+            }
+        }
+    }
 }
diff --git a/src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformer.java b/src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformer.java
index 1cb681797a..58ea36f6dd 100644
--- a/src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformer.java
+++ b/src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/ResponseTemplateTransformer.java
@@ -44,6 +44,8 @@
 
 public class ResponseTemplateTransformer extends ResponseDefinitionTransformer {
 
+    public static final String NAME = "response-template";
+
     private final boolean global;
 
     private final Handlebars handlebars;
@@ -85,7 +87,7 @@ public boolean applyGlobally() {
 
     @Override
     public String getName() {
-        return "response-template";
+        return NAME;
     }
 
     @Override
diff --git a/src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsXPathHelper.java b/src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsXPathHelper.java
index a620830718..7350abf209 100644
--- a/src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsXPathHelper.java
+++ b/src/main/java/com/github/tomakehurst/wiremock/extension/responsetemplating/helpers/HandlebarsXPathHelper.java
@@ -55,7 +55,7 @@ public Object apply(final String inputXml, final Options options) throws IOExcep
         Document doc;
         try (final StringReader reader = new StringReader(inputXml)) {
             InputSource source = new InputSource(reader);
-            final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+            final DocumentBuilderFactory factory = Xml.newDocumentBuilderFactory();
             final DocumentBuilder builder = factory.newDocumentBuilder();
             doc = builder.parse(source);
         } catch (SAXException se) {
diff --git a/src/main/java/com/github/tomakehurst/wiremock/matching/EqualToXmlPattern.java b/src/main/java/com/github/tomakehurst/wiremock/matching/EqualToXmlPattern.java
index 7cd368b00d..0295ac5190 100644
--- a/src/main/java/com/github/tomakehurst/wiremock/matching/EqualToXmlPattern.java
+++ b/src/main/java/com/github/tomakehurst/wiremock/matching/EqualToXmlPattern.java
@@ -108,7 +108,7 @@ public boolean isExactMatch() {
                         .ignoreWhitespace()
                         .ignoreComments()
                         .withDifferenceEvaluator(IGNORE_UNCOUNTED_COMPARISONS)
-                        .withDocumentBuilderFactory(new SkipResolvingEntitiesDocumentBuilderFactory())
+                        .withDocumentBuilderFactory(Xml.newDocumentBuilderFactory())
                         .build();
 
                     return !diff.hasDifferences();
@@ -147,7 +147,7 @@ public void comparisonPerformed(Comparison comparison, ComparisonResult outcome)
                                 }
                             }
                         })
-                        .withDocumentBuilderFactory(new SkipResolvingEntitiesDocumentBuilderFactory())
+                        .withDocumentBuilderFactory(Xml.newDocumentBuilderFactory())
                         .build();
                 } catch (XMLUnitException e) {
                     notifier().info("Failed to process XML. " + e.getMessage() +
@@ -176,19 +176,5 @@ public ComparisonResult evaluate(Comparison comparison, ComparisonResult outcome
         }
     };
 
-    public static class SkipResolvingEntitiesDocumentBuilderFactory extends DocumentBuilderFactoryImpl {
-        @Override
-        public DocumentBuilder newDocumentBuilder() throws ParserConfigurationException {
-            DocumentBuilder documentBuilder = super.newDocumentBuilder();
-            documentBuilder.setEntityResolver(new ResolveToEmptyString());
-            return documentBuilder;
-        }
 
-        private class ResolveToEmptyString implements EntityResolver {
-            @Override
-            public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
-                return new InputSource(new StringReader(""));
-            }
-        }
-    }
 }
diff --git a/src/main/java/com/github/tomakehurst/wiremock/matching/MatchesXPathPattern.java b/src/main/java/com/github/tomakehurst/wiremock/matching/MatchesXPathPattern.java
index 6165a943f7..eb950a405f 100755
--- a/src/main/java/com/github/tomakehurst/wiremock/matching/MatchesXPathPattern.java
+++ b/src/main/java/com/github/tomakehurst/wiremock/matching/MatchesXPathPattern.java
@@ -39,6 +39,7 @@
 import java.util.Map;
 import java.util.SortedSet;
 
+import static com.github.tomakehurst.wiremock.common.Exceptions.throwUnchecked;
 import static com.github.tomakehurst.wiremock.common.LocalNotifier.notifier;
 import static com.google.common.base.MoreObjects.firstNonNull;
 import static com.google.common.collect.Sets.newTreeSet;
@@ -118,7 +119,7 @@ protected MatchResult isAdvancedJsonPathMatch(String value) {
 
     private NodeList findXmlNodesMatching(String value) {
         try {
-            DocumentBuilder documentBuilder = XMLUnit.newControlParser();
+            DocumentBuilder documentBuilder = Xml.newDocumentBuilderFactory().newDocumentBuilder();
             documentBuilder.setErrorHandler(new SilentErrorHandler());
             Document inDocument = XMLUnit.buildDocument(documentBuilder, new StringReader(value));
             XpathEngine simpleXpathEngine = XMLUnit.newXpathEngine();
@@ -137,6 +138,8 @@ private NodeList findXmlNodesMatching(String value) {
         } catch (XpathException e) {
             notifier().info("Warning: failed to evaluate the XPath expression " + expectedValue);
             return null;
+        } catch (Exception e) {
+            return throwUnchecked(e, NodeList.class);
         }
     }
 }
diff --git a/src/test/java/com/github/tomakehurst/wiremock/XmlHandlingAcceptanceTest.java b/src/test/java/com/github/tomakehurst/wiremock/XmlHandlingAcceptanceTest.java
new file mode 100644
index 0000000000..a43c9dfeef
--- /dev/null
+++ b/src/test/java/com/github/tomakehurst/wiremock/XmlHandlingAcceptanceTest.java
@@ -0,0 +1,96 @@
+package com.github.tomakehurst.wiremock;
+
+import com.github.tomakehurst.wiremock.common.ConsoleNotifier;
+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;
+import com.github.tomakehurst.wiremock.junit.WireMockRule;
+import com.github.tomakehurst.wiremock.testsupport.WireMockTestClient;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+
+import static com.github.tomakehurst.wiremock.client.WireMock.*;
+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+
+public class XmlHandlingAcceptanceTest {
+
+    @Rule
+    public WireMockRule wm = new WireMockRule(options().dynamicPort().extensions(new ResponseTemplateTransformer(false)));
+
+    @Rule
+    public WireMockRule externalDtdServer = new WireMockRule(options().dynamicPort().notifier(new ConsoleNotifier(true)));
+
+    WireMockTestClient client;
+
+    @Before
+    public void init() {
+        client = new WireMockTestClient(wm.port());
+
+        externalDtdServer.stubFor(get("/dodgy.dtd").willReturn(ok(
+            "<!ELEMENT shiftydata (#PCDATA)>")
+            .withHeader("Content-Type", "application/xml-dtd"))
+        );
+    }
+
+    @Test
+    public void doesNotDownloadExternalDtdDocumentsWhenMatchingOnEqualToXml() {
+        String xml =
+            "<?xml version=\"1.0\"?>\n" +
+            "<!DOCTYPE things [\n" +
+            "<!ENTITY % sp SYSTEM \"http://localhost:" + externalDtdServer.port() + "/dodgy.dtd\">\n" +
+            "%sp;\n" +
+            "]>\n" +
+            "\n" +
+            "<things><shiftydata>123</shiftydata></things>";
+
+        wm.stubFor(post("/xml-match")
+            .withRequestBody(equalToXml(xml))
+            .willReturn(ok()));
+
+        assertThat(client.postXml("/xml-match", xml).statusCode(), is(200));
+
+        externalDtdServer.verify(0, getRequestedFor(anyUrl()));
+    }
+
+    @Test
+    public void doesNotDownloadExternalDtdDocumentsWhenMatchingXPath() {
+        String xml =
+            "<?xml version=\"1.0\"?>\n" +
+                "<!DOCTYPE things [\n" +
+                "<!ENTITY % sp SYSTEM \"http://localhost:" + externalDtdServer.port() + "/dodgy.dtd\">\n" +
+                "%sp;\n" +
+                "]>\n" +
+                "\n" +
+                "<things><shiftydata>123</shiftydata></things>";
+
+        wm.stubFor(post("/xpath-match")
+            .withRequestBody(matchingXPath("//shiftydata"))
+            .willReturn(ok()));
+
+        assertThat(client.postXml("/xpath-match", xml).statusCode(), is(200));
+
+        externalDtdServer.verify(0, getRequestedFor(anyUrl()));
+    }
+
+    @Test
+    public void doesNotDownloadExternalDtdDocumentsWhenEvaluatingXPathInTemplate() {
+        String xml =
+            "<?xml version=\"1.0\"?>\n" +
+                "<!DOCTYPE things [\n" +
+                "<!ENTITY % sp SYSTEM \"http://localhost:" + externalDtdServer.port() + "/dodgy.dtd\">\n" +
+                "%sp;\n" +
+                "]>\n" +
+                "\n" +
+                "<things><shiftydata>123</shiftydata></things>";
+
+        wm.stubFor(post("/xpath-template")
+            .willReturn(
+                ok("{{xPath request.body '//shiftydata/text()'}}")
+                .withTransformers(ResponseTemplateTransformer.NAME)));
+
+        assertThat(client.postXml("/xpath-template", xml).statusCode(), is(200));
+
+        externalDtdServer.verify(0, getRequestedFor(anyUrl()));
+    }
+}
