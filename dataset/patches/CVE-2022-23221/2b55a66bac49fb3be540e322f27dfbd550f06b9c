From 2d5616e469876fc5d8cea02c8e08b5af967ead7e Mon Sep 17 00:00:00 2001
From: Evgenij Ryazanov <katzyn@gmail.com>
Date: Fri, 7 Jan 2022 00:20:02 +0800
Subject: [PATCH] Return DatabaseMetaData.tableIndexOther for regular indexes

---
 h2/src/docsrc/html/changelog.html                   |  2 ++
 h2/src/main/org/h2/jdbc/meta/DatabaseMetaLocal.java | 12 +-----------
 h2/src/test/org/h2/test/jdbc/TestMetaData.java      | 12 ++++++------
 3 files changed, 9 insertions(+), 17 deletions(-)

diff --git a/h2/src/docsrc/html/changelog.html b/h2/src/docsrc/html/changelog.html
index 37e3aa9c73..f6122f0ce2 100644
--- a/h2/src/docsrc/html/changelog.html
+++ b/h2/src/docsrc/html/changelog.html
@@ -21,6 +21,8 @@ <h1>Change Log</h1>
 
 <h2>Next Version (unreleased)</h2>
 <ul>
+<li>Issue #3340: JDBC index type seems wrong
+</li>
 <li>Issue #3336: FT_INIT error when mode=MySQL
 </li>
 <li>Issue #3334: Regression with CREATE ALIAS - Parameter "#2" is not set
diff --git a/h2/src/main/org/h2/jdbc/meta/DatabaseMetaLocal.java b/h2/src/main/org/h2/jdbc/meta/DatabaseMetaLocal.java
index 615a91d3e1..fa43376376 100644
--- a/h2/src/main/org/h2/jdbc/meta/DatabaseMetaLocal.java
+++ b/h2/src/main/org/h2/jdbc/meta/DatabaseMetaLocal.java
@@ -106,8 +106,6 @@ public final class DatabaseMetaLocal extends DatabaseMetaLocalBase {
     private static final ValueSmallint PROCEDURE_RETURNS_RESULT = ValueSmallint
             .get((short) DatabaseMetaData.procedureReturnsResult);
 
-    private static final ValueSmallint TABLE_INDEX_STATISTIC = ValueSmallint.get(DatabaseMetaData.tableIndexStatistic);
-
     private static final ValueSmallint TABLE_INDEX_HASHED = ValueSmallint.get(DatabaseMetaData.tableIndexHashed);
 
     private static final ValueSmallint TABLE_INDEX_OTHER = ValueSmallint.get(DatabaseMetaData.tableIndexOther);
@@ -1269,15 +1267,7 @@ private void getIndexInfo(Value catalogValue, Value schemaValue, Table table, bo
                 Value tableValue = getString(table.getName());
                 Value indexValue = getString(index.getName());
                 IndexColumn[] cols = index.getIndexColumns();
-                ValueSmallint type = TABLE_INDEX_STATISTIC;
-                type: if (uniqueColumnCount == cols.length) {
-                    for (IndexColumn c : cols) {
-                        if (c.column.isNullable()) {
-                            break type;
-                        }
-                    }
-                    type = index.getIndexType().isHash() ? TABLE_INDEX_HASHED : TABLE_INDEX_OTHER;
-                }
+                ValueSmallint type = index.getIndexType().isHash() ? TABLE_INDEX_HASHED : TABLE_INDEX_OTHER;
                 for (int i = 0, l = cols.length; i < l; i++) {
                     IndexColumn c = cols[i];
                     boolean nonUnique = i >= uniqueColumnCount;
diff --git a/h2/src/test/org/h2/test/jdbc/TestMetaData.java b/h2/src/test/org/h2/test/jdbc/TestMetaData.java
index 50eaffd57a..ebf8879849 100644
--- a/h2/src/test/org/h2/test/jdbc/TestMetaData.java
+++ b/h2/src/test/org/h2/test/jdbc/TestMetaData.java
@@ -893,16 +893,16 @@ private void testMore() throws SQLException {
                         Types.VARCHAR }, null, null);
         assertResultSetOrdered(rs, new String[][] {
                 { CATALOG, Constants.SCHEMA_MAIN, "TEST", "FALSE", CATALOG,
-                        "IDX_DATE", "" + DatabaseMetaData.tableIndexStatistic, "1",
+                        "IDX_DATE", "" + DatabaseMetaData.tableIndexOther, "1",
                         "DATE_V", "A", "0", "0" },
                 { CATALOG, Constants.SCHEMA_MAIN, "TEST", "FALSE", CATALOG,
                         "PRIMARY_KEY_2", "" + DatabaseMetaData.tableIndexOther,
                         "1", "ID", "A", "0", "0" },
                 { CATALOG, Constants.SCHEMA_MAIN, "TEST", "TRUE", CATALOG,
-                        "IDX_TEXT_DEC", "" + DatabaseMetaData.tableIndexStatistic,
+                        "IDX_TEXT_DEC", "" + DatabaseMetaData.tableIndexOther,
                         "1", "TEXT_V", "A", "0", "0" },
                 { CATALOG, Constants.SCHEMA_MAIN, "TEST", "TRUE", CATALOG,
-                        "IDX_TEXT_DEC", "" + DatabaseMetaData.tableIndexStatistic,
+                        "IDX_TEXT_DEC", "" + DatabaseMetaData.tableIndexOther,
                         "2", "DEC_V", "A", "0", "0" }, },
                 new int[] { 11 });
         stat.executeUpdate("DROP INDEX IDX_TEXT_DEC");
@@ -992,13 +992,13 @@ private void testMore() throws SQLException {
                         "PRIMARY_KEY_14",
                         "" + DatabaseMetaData.tableIndexOther, "3", "B", "A" },
                 { CATALOG, Constants.SCHEMA_MAIN, "TX2", "TRUE", CATALOG,
-                        "B_INDEX", "" + DatabaseMetaData.tableIndexStatistic, "1",
+                        "B_INDEX", "" + DatabaseMetaData.tableIndexOther, "1",
                         "A", "A" },
                 { CATALOG, Constants.SCHEMA_MAIN, "TX2", "TRUE", CATALOG,
-                        "B_INDEX", "" + DatabaseMetaData.tableIndexStatistic, "2",
+                        "B_INDEX", "" + DatabaseMetaData.tableIndexOther, "2",
                         "B", "A" },
                 { CATALOG, Constants.SCHEMA_MAIN, "TX2", "TRUE", CATALOG,
-                        "B_INDEX", "" + DatabaseMetaData.tableIndexStatistic, "3",
+                        "B_INDEX", "" + DatabaseMetaData.tableIndexOther, "3",
                         "C", "A" }, },
                 new int[] { 11 });
         trace("getPrimaryKeys");
