{
  "1.7.2_1": [
    "<eu.unicore.util.httpclient.HostnameMismatchCallbackImpl: void nameMismatch(javax.net.ssl.SSLSocket,java.security.cert.X509Certificate,java.lang.String)>",
    "<eu.unicore.util.jetty.JettyConnectorUtils$1: void handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent)>",
    "<eu.unicore.security.SecurityTokens: java.lang.String toString()>",
    "<eu.unicore.security.wsutil.client.MySSLSocketFactory: void checkHostname(javax.net.ssl.SSLSocket)>",
    "<eu.unicore.security.canl.LoggingX509TrustManager: void logCerts(java.lang.String,java.security.cert.X509Certificate[])>",
    "<eu.unicore.samly2.trust.PKISamlTrustChecker: java.security.PublicKey establishKey(xmlbeans.org.oasis.saml2.assertion.NameIDType,xmlbeans.org.w3.x2000.x09.xmldsig.SignatureType)>",
    "<de.fzj.unicore.wsrflite.xmlbeans.WSUtilities: javax.security.auth.x500.X500Principal extractServerX500Principal(org.w3.x2005.x08.addressing.EndpointReferenceType)>",
    "<eu.unicore.security.canl.CredentialProperties: void createCredentialSafe()>",
    "<eu.unicore.security.wsutil.AuthInHandler: void processConsignor(eu.unicore.security.consignor.ConsignorAssertion,eu.unicore.security.SecurityTokens,org.apache.cxf.binding.soap.SoapMessage)>",
    "<eu.unicore.security.wsutil.client.authn.SAMLAuthN: java.lang.String getKey(java.lang.String,java.lang.String)>",
    "<eu.unicore.samly2.assertion.Assertion: void setX509Issuer(java.lang.String)>",
    "<eu.unicore.samly2.assertion.Assertion: void setX509Subject(java.lang.String)>",
    "<eu.unicore.samly2.trust.StrictSamlTrustChecker: java.lang.String getIssuerKey(xmlbeans.org.oasis.saml2.assertion.NameIDType)>",
    "<eu.unicore.security.canl.TrustedIssuersProperties: eu.emi.security.authn.x509.impl.KeystoreCertChainValidator getKeystoreValidator()>",
    "<eu.unicore.samly2.trust.TruststoreBasedSamlTrustChecker: java.security.PublicKey establishKey(xmlbeans.org.oasis.saml2.assertion.NameIDType,xmlbeans.org.w3.x2000.x09.xmldsig.SignatureType)>",
    "<eu.unicore.samly2.trust.StrictSamlTrustChecker: java.security.PublicKey establishKey(xmlbeans.org.oasis.saml2.assertion.NameIDType,xmlbeans.org.w3.x2000.x09.xmldsig.SignatureType)>",
    "<eu.unicore.security.etd.ETDImpl: eu.unicore.security.ValidationResult validateTDBasic(eu.emi.security.authn.x509.X509CertChainValidator,eu.unicore.security.etd.TrustDelegation,java.security.cert.X509Certificate[],java.lang.String,java.lang.Integer,java.lang.String)>",
    "<eu.unicore.security.canl.SSLContextCreator: void debugTS(eu.emi.security.authn.x509.X509CertChainValidator,java.lang.String,org.apache.log4j.Logger)>",
    "<eu.unicore.security.etd.ETDImpl: eu.unicore.security.ValidationResult isTrustDelegated(java.util.List,java.lang.String,java.lang.String,eu.emi.security.authn.x509.X509CertChainValidator,java.util.Collection)>",
    "<eu.unicore.security.wsutil.ETDInHandler: void checkDelegation(eu.unicore.security.SecurityTokens,java.util.List)>",
    "<eu.unicore.security.wsutil.AuthInHandler: java.security.cert.X509Certificate[] processConsignorAssertion(eu.unicore.security.consignor.ConsignorAssertion)>",
    "<eu.unicore.security.wsutil.client.ExtendedTDOutHandler: void setupExtendedAssertionList(eu.unicore.util.httpclient.IClientConfiguration)>",
    "<eu.unicore.security.etd.TrustDelegation: void <init>(java.lang.String)>",
    "<eu.unicore.security.wsutil.ETDInHandler: void doCheck(eu.unicore.security.SecurityTokens)>",
    "<eu.unicore.security.wsutil.ETDInHandler: boolean checkIfConsignorTrusted(boolean,boolean,java.util.List,java.lang.String,java.lang.String,java.lang.String)>",
    "<eu.unicore.security.canl.SSLContextCreator: void debugKS(eu.emi.security.authn.x509.X509Credential,java.lang.String,org.apache.log4j.Logger)>",
    "<eu.unicore.security.wsutil.client.WSS4JCryptoImpl: java.security.cert.X509Certificate[] getX509Certificates(org.apache.ws.security.components.crypto.CryptoType)>",
    "<eu.unicore.security.consignor.ConsignorValidator: void validate(xmlbeans.org.oasis.saml2.assertion.AssertionDocument)>",
    "<eu.unicore.samly2.validators.AssertionValidator: boolean audienceMatching(java.lang.String,java.lang.String)>",
    "<eu.unicore.security.Client: java.lang.String toString()>",
    "<eu.unicore.security.canl.LoggingX509TrustManager: void logSuccessfulVerification(java.lang.String,java.security.cert.X509Certificate[])>",
    "<eu.unicore.security.etd.ETDImpl: eu.unicore.security.ValidationResult validateTD(eu.unicore.security.etd.TrustDelegation,java.lang.String,xmlbeans.org.oasis.saml2.assertion.NameIDType,java.lang.String,eu.emi.security.authn.x509.X509CertChainValidator)>",
    "<eu.unicore.security.wsutil.AuthInHandler: void processSAMLAuthentication(org.w3c.dom.Element,eu.unicore.security.consignor.ConsignorAssertion,eu.unicore.security.SecurityTokens,org.apache.cxf.binding.soap.SoapMessage)>",
    "<eu.unicore.samly2.trust.StrictSamlTrustChecker: void addTrustedIssuer(java.lang.String,java.lang.String,java.util.List)>",
    "<eu.unicore.security.wsutil.client.MySSLSocketFactory: void debugTS(eu.emi.security.authn.x509.X509CertChainValidator)>",
    "<eu.unicore.util.httpclient.ConnectionUtil: java.security.cert.X509Certificate[] getPeerCertificate(eu.unicore.security.canl.IAuthnAndTrustConfiguration,java.lang.String,int,org.apache.log4j.Logger)>",
    "<eu.unicore.security.etd.ETDImpl: boolean isSubjectInChain(java.util.List,java.lang.String)>",
    "<eu.unicore.security.wsutil.AuthInHandler: void processUser(org.w3c.dom.Element,eu.unicore.security.SecurityTokens)>",
    "<eu.unicore.security.SecurityTokens: java.security.cert.X509Certificate getConsignorCertificate()>",
    "<eu.unicore.security.wsutil.client.MySSLSocketFactory: void debugKS(eu.emi.security.authn.x509.X509Credential)>",
    "<eu.unicore.security.canl.TrustedIssuersProperties: eu.emi.security.authn.x509.impl.DirectoryCertChainValidator getDirectoryValidator()>",
    "<eu.unicore.util.httpclient.CanlHostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>",
    "<de.fzj.unicore.uas.security.ProxyCertOutHandler: java.lang.String generateProxy()>",
    "<eu.unicore.security.SecurityTokens: boolean isConsignorUsingProxy()>"
  ]
}