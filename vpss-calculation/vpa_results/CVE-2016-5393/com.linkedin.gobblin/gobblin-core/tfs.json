{
  "0.6.0-hadoop1": [
    "<gobblin.source.extractor.hadoop.AvroFsHelper: org.apache.avro.file.DataFileReader getAvroFile(java.lang.String)>",
    "<gobblin.source.extractor.extract.kafka.KafkaWrapper$Builder: gobblin.source.extractor.extract.kafka.KafkaWrapper$Builder withBrokers(java.util.List)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.apache.avro.generic.GenericRecord partitionForRecord(java.lang.Object)>",
    "<gobblin.source.extractor.hadoop.AvroFsHelper: org.apache.avro.Schema getAvroSchema(java.lang.String)>",
    "<gobblin.source.extractor.filebased.FileBasedExtractor: void <init>(gobblin.configuration.WorkUnitState,gobblin.source.extractor.filebased.FileBasedHelper)>",
    "<gobblin.fork.CopyableGenericRecord: org.apache.avro.generic.GenericRecord copy()>",
    "<gobblin.converter.avro.JsonElementConversionFactory$JsonElementConverter: org.apache.avro.Schema schema()>",
    "<gobblin.writer.PartitionedDataWriter: void <clinit>()>",
    "<gobblin.source.extractor.utils.Utils: java.lang.String dateTimeToString(org.joda.time.DateTime,java.lang.String,java.lang.String)>",
    "<gobblin.source.extractor.extract.kafka.MultiLongWatermark: void <init>(gobblin.source.extractor.extract.kafka.MultiLongWatermark)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$EnumConverter: org.apache.avro.Schema schema()>",
    "<gobblin.instrumented.Instrumented: gobblin.metrics.MetricContext newContextFromReferenceContext(gobblin.metrics.MetricContext,java.util.List,com.google.common.base.Optional)>",
    "<gobblin.converter.avro.JsonIntermediateToAvroConverter: org.apache.avro.Schema convertSchema(com.google.gson.JsonArray,gobblin.configuration.WorkUnitState)>",
    "<gobblin.policies.time.RecordTimestampLowerBoundPolicy: com.google.common.base.Optional getEarliestAllowedTimestamp()>",
    "<gobblin.source.extractor.extract.kafka.workunit.packer.KafkaBiLevelWorkUnitPacker: java.util.List bestFitDecreasingBinPacking(java.util.List,double)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$ArrayConverter: org.apache.avro.Schema schema()>",
    "<gobblin.source.extractor.utils.Utils: org.joda.time.DateTime getCurrentTime(java.lang.String)>",
    "<gobblin.qualitychecker.row.RowLevelPolicyCheckerBuilder: java.util.List createPolicyList()>",
    "<gobblin.source.extractor.utils.Utils: long getLongWithCurrentDate(java.lang.String,java.lang.String)>",
    "<gobblin.converter.csv.CsvToJsonConverter: java.lang.Iterable convertRecord(com.google.gson.JsonArray,java.lang.String,gobblin.configuration.WorkUnitState)>",
    "<gobblin.source.extractor.filebased.FileBasedSource: java.util.List getWorkunits(gobblin.configuration.SourceState)>",
    "<gobblin.source.extractor.extract.kafka.KafkaAvroExtractor: void <init>(gobblin.configuration.WorkUnitState)>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromArray(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$MapConverter: org.apache.avro.Schema schema()>",
    "<gobblin.qualitychecker.task.TaskLevelPolicyCheckerBuilder: java.util.List createPolicyList()>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromRecords(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.policies.time.RecordTimestampLowerBoundPolicy: void <init>(gobblin.configuration.State,gobblin.qualitychecker.row.RowLevelPolicy$Type)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$DateConverter: java.lang.Object convertField(com.google.gson.JsonElement)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: com.google.common.base.Optional getTimestampToPathFormatter(gobblin.configuration.State,int,int)>",
    "<gobblin.source.DatePartitionedDailyAvroSource: void <clinit>()>",
    "<gobblin.source.extractor.extract.QueryBasedSource: long getLatestWatermarkFromMetadata(gobblin.configuration.SourceState)>",
    "<gobblin.source.extractor.extract.kafka.KafkaAvroExtractor: void <clinit>()>",
    "<gobblin.source.extractor.utils.Utils: org.joda.time.DateTime toDateTime(java.lang.String,java.lang.String,java.lang.String)>",
    "<gobblin.source.DatePartitionedDailyAvroSource: long getLowWaterMark(java.lang.Iterable,java.lang.String)>",
    "<gobblin.converter.avro.JsonElementConversionFactory: org.joda.time.DateTimeZone getTimeZone(java.lang.String)>",
    "<gobblin.source.DatePartitionedDailyAvroSource: void init(gobblin.configuration.SourceState)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.apache.avro.Schema getDateTimeFormatBasedSchema()>",
    "<gobblin.source.DatePartitionedDailyAvroSource: void addNewWorkUnits(gobblin.source.workunit.MultiWorkUnitWeightedQueue)>",
    "<gobblin.writer.AvroHdfsDataWriter: void <init>(gobblin.writer.FsDataWriterBuilder,gobblin.configuration.State)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$JsonElementConverter: org.apache.avro.Schema getSchema()>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromMap(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.source.extractor.utils.Utils: com.google.gson.JsonObject csvToJsonObject(java.util.List,java.util.List,int)>",
    "<gobblin.source.extractor.utils.Utils: org.joda.time.DateTimeZone getTimeZone(java.lang.String)>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromUnion(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.apache.avro.Schema getGranularityBasedSchema()>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.joda.time.DateTimeZone getTimeZone(gobblin.configuration.State,int,int)>",
    "<gobblin.source.extractor.extract.kafka.MultiLongWatermark: void <init>(java.util.List)>"
  ],
  "0.0.0.mavenTest1": [
    "<gobblin.source.extractor.hadoop.AvroFsHelper: org.apache.avro.file.DataFileReader getAvroFile(java.lang.String)>",
    "<gobblin.source.extractor.extract.kafka.KafkaWrapper$Builder: gobblin.source.extractor.extract.kafka.KafkaWrapper$Builder withBrokers(java.util.List)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.apache.avro.generic.GenericRecord partitionForRecord(java.lang.Object)>",
    "<gobblin.source.extractor.hadoop.AvroFsHelper: org.apache.avro.Schema getAvroSchema(java.lang.String)>",
    "<gobblin.source.extractor.filebased.FileBasedExtractor: void <init>(gobblin.configuration.WorkUnitState,gobblin.source.extractor.filebased.FileBasedHelper)>",
    "<gobblin.fork.CopyableGenericRecord: org.apache.avro.generic.GenericRecord copy()>",
    "<gobblin.converter.avro.JsonElementConversionFactory$JsonElementConverter: org.apache.avro.Schema schema()>",
    "<gobblin.writer.PartitionedDataWriter: void <clinit>()>",
    "<gobblin.source.extractor.utils.Utils: java.lang.String dateTimeToString(org.joda.time.DateTime,java.lang.String,java.lang.String)>",
    "<gobblin.source.extractor.extract.kafka.MultiLongWatermark: void <init>(gobblin.source.extractor.extract.kafka.MultiLongWatermark)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$EnumConverter: org.apache.avro.Schema schema()>",
    "<gobblin.instrumented.Instrumented: gobblin.metrics.MetricContext newContextFromReferenceContext(gobblin.metrics.MetricContext,java.util.List,com.google.common.base.Optional)>",
    "<gobblin.converter.avro.JsonIntermediateToAvroConverter: org.apache.avro.Schema convertSchema(com.google.gson.JsonArray,gobblin.configuration.WorkUnitState)>",
    "<gobblin.policies.time.RecordTimestampLowerBoundPolicy: com.google.common.base.Optional getEarliestAllowedTimestamp()>",
    "<gobblin.source.extractor.extract.kafka.workunit.packer.KafkaBiLevelWorkUnitPacker: java.util.List bestFitDecreasingBinPacking(java.util.List,double)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$ArrayConverter: org.apache.avro.Schema schema()>",
    "<gobblin.source.extractor.utils.Utils: org.joda.time.DateTime getCurrentTime(java.lang.String)>",
    "<gobblin.qualitychecker.row.RowLevelPolicyCheckerBuilder: java.util.List createPolicyList()>",
    "<gobblin.source.extractor.utils.Utils: long getLongWithCurrentDate(java.lang.String,java.lang.String)>",
    "<gobblin.converter.csv.CsvToJsonConverter: java.lang.Iterable convertRecord(com.google.gson.JsonArray,java.lang.String,gobblin.configuration.WorkUnitState)>",
    "<gobblin.source.extractor.filebased.FileBasedSource: java.util.List getWorkunits(gobblin.configuration.SourceState)>",
    "<gobblin.source.extractor.extract.kafka.KafkaAvroExtractor: void <init>(gobblin.configuration.WorkUnitState)>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromArray(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$MapConverter: org.apache.avro.Schema schema()>",
    "<gobblin.qualitychecker.task.TaskLevelPolicyCheckerBuilder: java.util.List createPolicyList()>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromRecords(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.policies.time.RecordTimestampLowerBoundPolicy: void <init>(gobblin.configuration.State,gobblin.qualitychecker.row.RowLevelPolicy$Type)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$DateConverter: java.lang.Object convertField(com.google.gson.JsonElement)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: com.google.common.base.Optional getTimestampToPathFormatter(gobblin.configuration.State,int,int)>",
    "<gobblin.source.DatePartitionedDailyAvroSource: void <clinit>()>",
    "<gobblin.source.extractor.extract.QueryBasedSource: long getLatestWatermarkFromMetadata(gobblin.configuration.SourceState)>",
    "<gobblin.source.extractor.extract.kafka.KafkaAvroExtractor: void <clinit>()>",
    "<gobblin.source.extractor.utils.Utils: org.joda.time.DateTime toDateTime(java.lang.String,java.lang.String,java.lang.String)>",
    "<gobblin.source.DatePartitionedDailyAvroSource: long getLowWaterMark(java.lang.Iterable,java.lang.String)>",
    "<gobblin.converter.avro.JsonElementConversionFactory: org.joda.time.DateTimeZone getTimeZone(java.lang.String)>",
    "<gobblin.source.DatePartitionedDailyAvroSource: void init(gobblin.configuration.SourceState)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.apache.avro.Schema getDateTimeFormatBasedSchema()>",
    "<gobblin.source.DatePartitionedDailyAvroSource: void addNewWorkUnits(gobblin.source.workunit.MultiWorkUnitWeightedQueue)>",
    "<gobblin.writer.AvroHdfsDataWriter: void <init>(gobblin.writer.FsDataWriterBuilder,gobblin.configuration.State)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$JsonElementConverter: org.apache.avro.Schema getSchema()>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromMap(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.source.extractor.utils.Utils: com.google.gson.JsonObject csvToJsonObject(java.util.List,java.util.List,int)>",
    "<gobblin.source.extractor.utils.Utils: org.joda.time.DateTimeZone getTimeZone(java.lang.String)>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromUnion(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.apache.avro.Schema getGranularityBasedSchema()>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.joda.time.DateTimeZone getTimeZone(gobblin.configuration.State,int,int)>",
    "<gobblin.source.extractor.extract.kafka.MultiLongWatermark: void <init>(java.util.List)>"
  ],
  "0.0.0.mavenTest1-hadoop1": [
    "<gobblin.source.extractor.hadoop.AvroFsHelper: org.apache.avro.file.DataFileReader getAvroFile(java.lang.String)>",
    "<gobblin.source.extractor.extract.kafka.KafkaWrapper$Builder: gobblin.source.extractor.extract.kafka.KafkaWrapper$Builder withBrokers(java.util.List)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.apache.avro.generic.GenericRecord partitionForRecord(java.lang.Object)>",
    "<gobblin.source.extractor.hadoop.AvroFsHelper: org.apache.avro.Schema getAvroSchema(java.lang.String)>",
    "<gobblin.source.extractor.filebased.FileBasedExtractor: void <init>(gobblin.configuration.WorkUnitState,gobblin.source.extractor.filebased.FileBasedHelper)>",
    "<gobblin.fork.CopyableGenericRecord: org.apache.avro.generic.GenericRecord copy()>",
    "<gobblin.converter.avro.JsonElementConversionFactory$JsonElementConverter: org.apache.avro.Schema schema()>",
    "<gobblin.writer.PartitionedDataWriter: void <clinit>()>",
    "<gobblin.source.extractor.utils.Utils: java.lang.String dateTimeToString(org.joda.time.DateTime,java.lang.String,java.lang.String)>",
    "<gobblin.source.extractor.extract.kafka.MultiLongWatermark: void <init>(gobblin.source.extractor.extract.kafka.MultiLongWatermark)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$EnumConverter: org.apache.avro.Schema schema()>",
    "<gobblin.instrumented.Instrumented: gobblin.metrics.MetricContext newContextFromReferenceContext(gobblin.metrics.MetricContext,java.util.List,com.google.common.base.Optional)>",
    "<gobblin.converter.avro.JsonIntermediateToAvroConverter: org.apache.avro.Schema convertSchema(com.google.gson.JsonArray,gobblin.configuration.WorkUnitState)>",
    "<gobblin.policies.time.RecordTimestampLowerBoundPolicy: com.google.common.base.Optional getEarliestAllowedTimestamp()>",
    "<gobblin.source.extractor.extract.kafka.workunit.packer.KafkaBiLevelWorkUnitPacker: java.util.List bestFitDecreasingBinPacking(java.util.List,double)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$ArrayConverter: org.apache.avro.Schema schema()>",
    "<gobblin.source.extractor.utils.Utils: org.joda.time.DateTime getCurrentTime(java.lang.String)>",
    "<gobblin.qualitychecker.row.RowLevelPolicyCheckerBuilder: java.util.List createPolicyList()>",
    "<gobblin.source.extractor.utils.Utils: long getLongWithCurrentDate(java.lang.String,java.lang.String)>",
    "<gobblin.converter.csv.CsvToJsonConverter: java.lang.Iterable convertRecord(com.google.gson.JsonArray,java.lang.String,gobblin.configuration.WorkUnitState)>",
    "<gobblin.source.extractor.filebased.FileBasedSource: java.util.List getWorkunits(gobblin.configuration.SourceState)>",
    "<gobblin.source.extractor.extract.kafka.KafkaAvroExtractor: void <init>(gobblin.configuration.WorkUnitState)>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromArray(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$MapConverter: org.apache.avro.Schema schema()>",
    "<gobblin.qualitychecker.task.TaskLevelPolicyCheckerBuilder: java.util.List createPolicyList()>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromRecords(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.policies.time.RecordTimestampLowerBoundPolicy: void <init>(gobblin.configuration.State,gobblin.qualitychecker.row.RowLevelPolicy$Type)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$DateConverter: java.lang.Object convertField(com.google.gson.JsonElement)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: com.google.common.base.Optional getTimestampToPathFormatter(gobblin.configuration.State,int,int)>",
    "<gobblin.source.DatePartitionedDailyAvroSource: void <clinit>()>",
    "<gobblin.source.extractor.extract.QueryBasedSource: long getLatestWatermarkFromMetadata(gobblin.configuration.SourceState)>",
    "<gobblin.source.extractor.extract.kafka.KafkaAvroExtractor: void <clinit>()>",
    "<gobblin.source.extractor.utils.Utils: org.joda.time.DateTime toDateTime(java.lang.String,java.lang.String,java.lang.String)>",
    "<gobblin.source.DatePartitionedDailyAvroSource: long getLowWaterMark(java.lang.Iterable,java.lang.String)>",
    "<gobblin.converter.avro.JsonElementConversionFactory: org.joda.time.DateTimeZone getTimeZone(java.lang.String)>",
    "<gobblin.source.DatePartitionedDailyAvroSource: void init(gobblin.configuration.SourceState)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.apache.avro.Schema getDateTimeFormatBasedSchema()>",
    "<gobblin.source.DatePartitionedDailyAvroSource: void addNewWorkUnits(gobblin.source.workunit.MultiWorkUnitWeightedQueue)>",
    "<gobblin.writer.AvroHdfsDataWriter: void <init>(gobblin.writer.FsDataWriterBuilder,gobblin.configuration.State)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$JsonElementConverter: org.apache.avro.Schema getSchema()>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromMap(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.source.extractor.utils.Utils: com.google.gson.JsonObject csvToJsonObject(java.util.List,java.util.List,int)>",
    "<gobblin.source.extractor.utils.Utils: org.joda.time.DateTimeZone getTimeZone(java.lang.String)>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromUnion(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.apache.avro.Schema getGranularityBasedSchema()>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.joda.time.DateTimeZone getTimeZone(gobblin.configuration.State,int,int)>",
    "<gobblin.source.extractor.extract.kafka.MultiLongWatermark: void <init>(java.util.List)>"
  ],
  "0.6.0": [
    "<gobblin.source.extractor.hadoop.AvroFsHelper: org.apache.avro.file.DataFileReader getAvroFile(java.lang.String)>",
    "<gobblin.source.extractor.extract.kafka.KafkaWrapper$Builder: gobblin.source.extractor.extract.kafka.KafkaWrapper$Builder withBrokers(java.util.List)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.apache.avro.generic.GenericRecord partitionForRecord(java.lang.Object)>",
    "<gobblin.source.extractor.hadoop.AvroFsHelper: org.apache.avro.Schema getAvroSchema(java.lang.String)>",
    "<gobblin.source.extractor.filebased.FileBasedExtractor: void <init>(gobblin.configuration.WorkUnitState,gobblin.source.extractor.filebased.FileBasedHelper)>",
    "<gobblin.fork.CopyableGenericRecord: org.apache.avro.generic.GenericRecord copy()>",
    "<gobblin.converter.avro.JsonElementConversionFactory$JsonElementConverter: org.apache.avro.Schema schema()>",
    "<gobblin.writer.PartitionedDataWriter: void <clinit>()>",
    "<gobblin.source.extractor.utils.Utils: java.lang.String dateTimeToString(org.joda.time.DateTime,java.lang.String,java.lang.String)>",
    "<gobblin.source.extractor.extract.kafka.MultiLongWatermark: void <init>(gobblin.source.extractor.extract.kafka.MultiLongWatermark)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$EnumConverter: org.apache.avro.Schema schema()>",
    "<gobblin.instrumented.Instrumented: gobblin.metrics.MetricContext newContextFromReferenceContext(gobblin.metrics.MetricContext,java.util.List,com.google.common.base.Optional)>",
    "<gobblin.converter.avro.JsonIntermediateToAvroConverter: org.apache.avro.Schema convertSchema(com.google.gson.JsonArray,gobblin.configuration.WorkUnitState)>",
    "<gobblin.policies.time.RecordTimestampLowerBoundPolicy: com.google.common.base.Optional getEarliestAllowedTimestamp()>",
    "<gobblin.source.extractor.extract.kafka.workunit.packer.KafkaBiLevelWorkUnitPacker: java.util.List bestFitDecreasingBinPacking(java.util.List,double)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$ArrayConverter: org.apache.avro.Schema schema()>",
    "<gobblin.source.extractor.utils.Utils: org.joda.time.DateTime getCurrentTime(java.lang.String)>",
    "<gobblin.qualitychecker.row.RowLevelPolicyCheckerBuilder: java.util.List createPolicyList()>",
    "<gobblin.source.extractor.utils.Utils: long getLongWithCurrentDate(java.lang.String,java.lang.String)>",
    "<gobblin.converter.csv.CsvToJsonConverter: java.lang.Iterable convertRecord(com.google.gson.JsonArray,java.lang.String,gobblin.configuration.WorkUnitState)>",
    "<gobblin.source.extractor.filebased.FileBasedSource: java.util.List getWorkunits(gobblin.configuration.SourceState)>",
    "<gobblin.source.extractor.extract.kafka.KafkaAvroExtractor: void <init>(gobblin.configuration.WorkUnitState)>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromArray(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$MapConverter: org.apache.avro.Schema schema()>",
    "<gobblin.qualitychecker.task.TaskLevelPolicyCheckerBuilder: java.util.List createPolicyList()>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromRecords(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.policies.time.RecordTimestampLowerBoundPolicy: void <init>(gobblin.configuration.State,gobblin.qualitychecker.row.RowLevelPolicy$Type)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$DateConverter: java.lang.Object convertField(com.google.gson.JsonElement)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: com.google.common.base.Optional getTimestampToPathFormatter(gobblin.configuration.State,int,int)>",
    "<gobblin.source.DatePartitionedDailyAvroSource: void <clinit>()>",
    "<gobblin.source.extractor.extract.QueryBasedSource: long getLatestWatermarkFromMetadata(gobblin.configuration.SourceState)>",
    "<gobblin.source.extractor.extract.kafka.KafkaAvroExtractor: void <clinit>()>",
    "<gobblin.source.extractor.utils.Utils: org.joda.time.DateTime toDateTime(java.lang.String,java.lang.String,java.lang.String)>",
    "<gobblin.source.DatePartitionedDailyAvroSource: long getLowWaterMark(java.lang.Iterable,java.lang.String)>",
    "<gobblin.converter.avro.JsonElementConversionFactory: org.joda.time.DateTimeZone getTimeZone(java.lang.String)>",
    "<gobblin.source.DatePartitionedDailyAvroSource: void init(gobblin.configuration.SourceState)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.apache.avro.Schema getDateTimeFormatBasedSchema()>",
    "<gobblin.source.DatePartitionedDailyAvroSource: void addNewWorkUnits(gobblin.source.workunit.MultiWorkUnitWeightedQueue)>",
    "<gobblin.writer.AvroHdfsDataWriter: void <init>(gobblin.writer.FsDataWriterBuilder,gobblin.configuration.State)>",
    "<gobblin.converter.avro.JsonElementConversionFactory$JsonElementConverter: org.apache.avro.Schema getSchema()>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromMap(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.source.extractor.utils.Utils: com.google.gson.JsonObject csvToJsonObject(java.util.List,java.util.List,int)>",
    "<gobblin.source.extractor.utils.Utils: org.joda.time.DateTimeZone getTimeZone(java.lang.String)>",
    "<gobblin.converter.filter.AvroSchemaFieldRemover: org.apache.avro.Schema removeFieldsFromUnion(org.apache.avro.Schema,java.util.Map)>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.apache.avro.Schema getGranularityBasedSchema()>",
    "<gobblin.writer.partitioner.TimeBasedWriterPartitioner: org.joda.time.DateTimeZone getTimeZone(gobblin.configuration.State,int,int)>",
    "<gobblin.source.extractor.extract.kafka.MultiLongWatermark: void <init>(java.util.List)>"
  ]
}