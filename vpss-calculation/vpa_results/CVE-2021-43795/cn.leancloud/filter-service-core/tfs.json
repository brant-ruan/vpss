{
  "1.10": [
    "<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>",
    "<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,int)>",
    "<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeDynamic(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>",
    "<io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses sequential0(java.util.List)>",
    "<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>",
    "<io.netty.handler.codec.http.cookie.ClientCookieEncoder: java.lang.String encode(java.lang.Iterable)>",
    "<io.micrometer.shaded.org.pcollections.HashPMap: io.micrometer.shaded.org.pcollections.HashPMap minus(java.lang.Object)>",
    "<com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator: void validateSubType(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>",
    "<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>",
    "<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>",
    "<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: boolean isProtocolEnabled(int,int,java.lang.String)>",
    "<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<org.apache.logging.log4j.simple.SimpleLogger: void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)>",
    "<cn.leancloud.filter.service.Bootstrap: com.linecorp.armeria.common.HttpResponse lambda$newServer$1(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest)>",
    "<io.netty.resolver.dns.DnsResolveContext: void finishResolve(io.netty.util.concurrent.Promise,java.lang.Throwable)>",
    "<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJavaUncached0(java.lang.String,boolean)>",
    "<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>",
    "<com.fasterxml.jackson.core.JsonLocation: boolean equals(java.lang.Object)>",
    "<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>",
    "<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: java.lang.String valueToString(java.lang.Object)>",
    "<org.yaml.snakeyaml.nodes.Tag: boolean isCompatible(java.lang.Class)>",
    "<io.netty.channel.group.DefaultChannelGroupFuture: void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)>",
    "<io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses shuffled0(java.util.List)>",
    "<io.netty.util.internal.TypeParameterMatcher: io.netty.util.internal.TypeParameterMatcher find(java.lang.Object,java.lang.Class,java.lang.String)>",
    "<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.databind.JsonSerializer findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer)>",
    "<io.netty.handler.codec.DefaultHeaders$HeaderEntry: boolean equals(java.lang.Object)>",
    "<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<io.netty.util.internal.DefaultPriorityQueue: void bubbleDown(int,io.netty.util.internal.PriorityQueueNode)>",
    "<org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>",
    "<io.netty.util.internal.PlatformDependent: void addClassifier(java.util.Set,java.util.Set,java.lang.String[])>",
    "<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.String get(java.lang.String)>",
    "<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>",
    "<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.lang.String selectApplicationProtocol(java.util.List,io.netty.handler.ssl.ApplicationProtocolConfig$SelectedListenerFailureBehavior,java.lang.String)>",
    "<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toJava(java.lang.String,java.lang.String)>",
    "<io.micrometer.core.instrument.Tags: io.micrometer.core.instrument.Tags of(java.lang.Iterable)>",
    "<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>",
    "<io.netty.util.internal.DefaultPriorityQueue: boolean removeTyped(io.netty.util.internal.PriorityQueueNode)>",
    "<io.netty.bootstrap.AbstractBootstrap: void setAttributes(io.netty.channel.Channel,java.util.Map$Entry[])>",
    "<io.netty.channel.ChannelHandlerMask: int mask(java.lang.Class)>",
    "<io.netty.handler.ssl.CipherSuiteConverter: java.util.Map cacheFromOpenSsl(java.lang.String)>",
    "<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: java.lang.String[] getSupportedProtocols()>",
    "<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean _hasNullKey(java.util.Map)>",
    "<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>",
    "<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Iterator)>",
    "<cn.leancloud.filter.service.GlobalExceptionHandler: com.linecorp.armeria.common.HttpResponse handleException(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest,java.lang.Throwable)>",
    "<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>",
    "<io.netty.util.internal.DefaultPriorityQueue: void priorityChanged(io.netty.util.internal.PriorityQueueNode)>",
    "<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>",
    "<io.micrometer.core.instrument.composite.CompositeMeterRegistry: void updateDescendants()>",
    "<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void _serializeDynamicContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<io.netty.handler.ssl.ConscryptAlpnSslEngine: void <init>(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBufAllocator,java.util.List)>",
    "<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<io.netty.util.concurrent.NonStickyEventExecutorGroup: io.netty.util.concurrent.EventExecutorGroup verify(io.netty.util.concurrent.EventExecutorGroup)>",
    "<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>",
    "<io.netty.handler.ssl.Java9SslUtils: void setApplicationProtocols(javax.net.ssl.SSLEngine,java.util.List)>",
    "<io.netty.bootstrap.AbstractBootstrap: void setChannelOptions(io.netty.channel.Channel,java.util.Map$Entry[],io.netty.util.internal.logging.InternalLogger)>",
    "<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>",
    "<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>",
    "<io.micrometer.core.instrument.MultiGauge: java.util.Set lambda$register$1(java.lang.Iterable,boolean,java.util.Set)>",
    "<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<io.netty.internal.tcnative.CertificateVerifier: boolean isValid(int)>",
    "<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$OpenSslClientCertificateCallback: void handle(long,byte[],byte[][])>",
    "<io.netty.resolver.dns.SequentialDnsServerAddressStream: java.net.InetSocketAddress next()>",
    "<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderValueConverter: java.lang.CharSequence convertObject(java.lang.Object)>",
    "<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String nextFieldName()>",
    "<io.micrometer.core.instrument.MeterRegistry: io.micrometer.core.instrument.Meter remove(io.micrometer.core.instrument.Meter$Id)>",
    "<io.netty.util.concurrent.FastThreadLocal: void removeAll()>",
    "<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserializeUsingCustom(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection,com.fasterxml.jackson.databind.JsonDeserializer)>",
    "<cn.leancloud.filter.service.Bootstrap: com.linecorp.armeria.server.Server newServer(io.micrometer.core.instrument.MeterRegistry,cn.leancloud.filter.service.ServerOptions,java.util.concurrent.ScheduledExecutorService)>",
    "<io.netty.channel.group.DefaultChannelGroupFuture$1: void operationComplete(io.netty.channel.ChannelFuture)>",
    "<org.apache.logging.log4j.spi.DefaultThreadContextMap: boolean containsKey(java.lang.String)>",
    "<com.fasterxml.jackson.databind.deser.std.StringDeserializer: java.lang.String deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>",
    "<io.netty.handler.codec.HeadersUtils$1: java.lang.String get(int)>",
    "<io.netty.handler.ssl.IdentityCipherSuiteFilter: java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)>",
    "<cn.leancloud.filter.service.BloomFilterManagerImpl: cn.leancloud.filter.service.FilterRecord lambda$iterator$0(java.util.Map$Entry)>",
    "<org.yaml.snakeyaml.events.Event: boolean equals(java.lang.Object)>",
    "<io.netty.handler.ssl.SupportedCipherSuiteFilter: java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)>",
    "<io.micrometer.core.instrument.binder.jvm.JvmGcMetrics: void lambda$bindTo$0(io.micrometer.core.instrument.MeterRegistry,io.micrometer.core.instrument.Counter,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,io.micrometer.core.instrument.Counter,javax.management.Notification,java.lang.Object)>",
    "<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>",
    "<cn.leancloud.filter.service.BloomFilterHttpService: com.linecorp.armeria.common.HttpResponse remove(java.lang.String)>",
    "<io.micrometer.shaded.org.pcollections.HashPMap: boolean containsKey(java.lang.Object)>",
    "<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: void setEnabledProtocols(java.lang.String[])>",
    "<io.netty.handler.codec.http.cookie.ServerCookieEncoder: java.util.List encode(java.lang.Iterable)>",
    "<org.apache.logging.log4j.util.EnvironmentPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>",
    "<com.fasterxml.jackson.core.JsonLocation: int hashCode()>",
    "<com.fasterxml.jackson.databind.node.POJONode: int hashCode()>",
    "<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String toOpenSslUncached(java.lang.String,boolean)>",
    "<io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelectionListener: void selected(java.lang.String)>",
    "<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map$Entry)>",
    "<org.apache.logging.log4j.message.ParameterFormatter: void appendCollection(java.lang.Object,java.lang.StringBuilder,java.util.Set)>",
    "<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>",
    "<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>",
    "<io.netty.handler.codec.DefaultHeaders$HeaderEntry: int hashCode()>",
    "<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>",
    "<io.netty.handler.ssl.OpenSsl: void <clinit>()>",
    "<io.netty.handler.ssl.OpenSsl: boolean isCipherSuiteAvailable(java.lang.String)>",
    "<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<io.netty.util.Version: java.util.Map identify(java.lang.ClassLoader)>",
    "<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<io.netty.handler.ssl.SslUtils: void addIfSupported(java.util.Set,java.util.List,java.lang.String[])>",
    "<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>",
    "<io.micrometer.core.instrument.MeterRegistry: io.micrometer.core.instrument.Meter getOrCreateMeter(io.micrometer.core.instrument.distribution.DistributionStatisticConfig,java.util.function.BiFunction,io.micrometer.core.instrument.Meter$Id,io.micrometer.core.instrument.Meter$Id,java.util.function.Function)>",
    "<io.netty.util.Recycler$Stack: void pushLater(io.netty.util.Recycler$DefaultHandle,java.lang.Thread)>",
    "<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void add(java.lang.Object)>",
    "<io.netty.resolver.dns.Cache$Entries: void add(java.lang.Object,int,io.netty.channel.EventLoop)>",
    "<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>",
    "<com.fasterxml.jackson.databind.ser.std.RawSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses rotational0(java.util.List)>",
    "<io.netty.handler.ssl.OpenSsl: void loadTcNative()>",
    "<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>",
    "<io.netty.handler.codec.DefaultHeaders$HeaderEntry: java.lang.String toString()>",
    "<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>",
    "<com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring: void handleResolvedForwardReference(java.lang.Object,java.lang.Object)>",
    "<io.netty.util.concurrent.MultithreadEventExecutorGroup: java.util.Iterator iterator()>",
    "<io.netty.util.internal.DefaultPriorityQueue: void bubbleUp(int,io.netty.util.internal.PriorityQueueNode)>",
    "<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>",
    "<io.netty.handler.codec.CharSequenceValueConverter: java.lang.CharSequence convertObject(java.lang.Object)>",
    "<io.netty.util.concurrent.FastThreadLocal: void removeFromVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)>",
    "<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection _deserializeWithObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>",
    "<io.netty.handler.ssl.ReferenceCountedOpenSslContext: void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int,java.security.cert.Certificate[],io.netty.handler.ssl.ClientAuth,java.lang.String[],boolean,boolean,boolean)>",
    "<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>",
    "<io.netty.handler.ssl.SslUtils: boolean isTLSv13Cipher(java.lang.String)>",
    "<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void serializeContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>",
    "<com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty: java.lang.Object setAndReturn(java.lang.Object,java.lang.Object)>",
    "<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndUpdateStringKeyMap(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>",
    "<io.micrometer.shaded.org.pcollections.HashPMap: java.lang.Object get(java.lang.Object)>",
    "<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>",
    "<io.micrometer.shaded.org.pcollections.HashPMap: int keyIndexIn(io.micrometer.shaded.org.pcollections.PSequence,java.lang.Object)>",
    "<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>",
    "<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>",
    "<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>",
    "<io.netty.channel.group.ChannelGroupException: java.util.Iterator iterator()>",
    "<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter: java.lang.Object convert(java.lang.Object)>",
    "<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<io.netty.handler.ssl.CipherSuiteConverter: java.lang.String cacheFromJava(java.lang.String,boolean)>",
    "<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>",
    "<io.micrometer.shaded.org.pcollections.TreePVector: io.micrometer.shaded.org.pcollections.TreePVector minus(java.lang.Object)>",
    "<cn.leancloud.filter.service.BloomFilterHttpService: com.linecorp.armeria.common.HttpResponse create(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>"
  ],
  "1.13": [
    "<cn.leancloud.filter.service.Bootstrap: com.linecorp.armeria.server.Server newServer(io.micrometer.core.instrument.MeterRegistry,cn.leancloud.filter.service.ServerOptions,java.util.concurrent.ScheduledExecutorService)>"
  ]
}