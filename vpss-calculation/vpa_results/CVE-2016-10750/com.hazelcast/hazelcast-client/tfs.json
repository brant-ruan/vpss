{
  "3.5.4": [
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.lang.Boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToOne()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeInvalidationListener(com.hazelcast.core.Member,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.impl.ClusterAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void addInvalidationListener(com.hazelcast.core.Member)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport$ManagerAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeOnTarget(com.hazelcast.client.impl.client.TargetClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String startListening(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeOnPartitionOwner(com.hazelcast.client.impl.client.ClientRequest,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.client.ClientRequest,int)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.client.connection.Authenticator,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: java.lang.Object get()>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.IOSelector,int)>"
  ],
  "3.1.2": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.connection.SSLSocketFactory: javax.net.ssl.SSLSocket createSocket()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.AbstractClientCollectionProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.7.8": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientJob: com.hazelcast.mapreduce.JobCompletableFuture invoke(com.hazelcast.mapreduce.Collator)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,byte,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThenInternal(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.8.8": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void sleepBeforeNextTry()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientSocketWriterInitializer: void init(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.internal.networking.SocketWriter,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback,java.util.concurrent.Executor)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void <init>(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: java.lang.Object newOperationTimeoutException(java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.String removeListenerLocally(javax.cache.configuration.CacheEntryListenerConfiguration)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void checkSslAllowed()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initIOThreads(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void closeListeners()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$1: com.hazelcast.client.spi.ClientProxy create(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.3.2": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: int size()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.HazelcastClient,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: boolean createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.impl.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.impl.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.impl.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,int)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.HazelcastClient: com.hazelcast.nio.serialization.SerializationServiceImpl initSerializationService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>"
  ],
  "3.9.2": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.io.InputStream)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKeyInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientTransactionManagerServiceImpl: java.lang.Exception newOperationTimeoutException(java.lang.Throwable,long,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture putInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,boolean,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addEventJournalConfig(com.hazelcast.config.EventJournalConfig)>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addSemaphoreConfig(com.hazelcast.config.SemaphoreConfig)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void connectToCluster()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$12: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: com.hazelcast.core.ICompletableFuture subscribeToEventJournal(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void build(com.hazelcast.client.config.ClientConfig,java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture readFromEventJournal(long,int,int,int,com.hazelcast.util.function.Predicate,com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addMapConfig(com.hazelcast.config.MapConfig)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addSetConfig(com.hazelcast.config.SetConfig)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClassesFromJar(java.io.ByteArrayOutputStream,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addDurableExecutorConfig(com.hazelcast.config.DurableExecutorConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addListConfig(com.hazelcast.config.ListConfig)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClasses()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.ClientConnectionStrategy initializeStrategy(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void waitForPartitionsFetchedOnce()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: com.hazelcast.core.ICompletableFuture readFromEventJournal(long,int,int,int,com.hazelcast.util.function.Predicate,com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addReliableTopicConfig(com.hazelcast.config.ReliableTopicConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTransactionUtil: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invokeInternal(java.lang.Object,com.hazelcast.nio.serialization.Data,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAllInternal(java.util.Set,java.util.List,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback,java.util.concurrent.Executor)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.spi.impl.AbstractClientInvocationService$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: void sleepBeforeNextTry()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getSyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void connectToClusterInternal()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(java.lang.Object)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addQueueConfig(com.hazelcast.config.QueueConfig)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void getAllInternal(java.util.Set,java.util.Collection,javax.cache.expiry.ExpiryPolicy,java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClassesFromJars()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.util.ClientDelegatingFuture getAndRemoveInternal(com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$12: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: void putAllInternal(java.util.Map,javax.cache.expiry.ExpiryPolicy,java.util.Map,java.util.List[],long)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture subscribeToEventJournal(int)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: java.lang.Object newOperationTimeoutException(java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addCacheConfig(com.hazelcast.config.CacheSimpleConfig)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set,java.util.Collection,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$2: com.hazelcast.client.spi.ClientProxy create(java.lang.String,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: com.hazelcast.spi.InternalCompletableFuture getAsyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addCardinalityEstimatorConfig(com.hazelcast.config.CardinalityEstimatorConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.String removeListenerLocally(javax.cache.configuration.CacheEntryListenerConfiguration)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addReplicatedMapConfig(com.hazelcast.config.ReplicatedMapConfig)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void checkSslAllowed()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.internal.networking.nio.NioEventLoopGroup initEventLoopGroup(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.client.util.ClientDelegatingFuture getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,com.hazelcast.client.spi.ClientContext,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void closeListeners()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addMultiMapConfig(com.hazelcast.config.MultiMapConfig)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.AbstractClientListenerService: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.HeartbeatManager: void run()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAllInternal(java.util.Map,javax.cache.expiry.ExpiryPolicy,java.util.Map,java.util.List[],long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addRingBufferConfig(com.hazelcast.config.RingbufferConfig)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.config.CacheConfig,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addScheduledExecutorConfig(com.hazelcast.config.ScheduledExecutorConfig)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$3: java.lang.Void call()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.config.ClientClasspathXmlConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addExecutorConfig(com.hazelcast.config.ExecutorConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void getAllInternal(java.util.Set,java.util.Map,java.util.List)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putSyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: java.lang.Object getSyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void listenPartitionTable(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: boolean replaceSyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addLockConfig(com.hazelcast.config.LockConfig)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void deploy(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: void invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapQueryPartitionIterator: java.util.List fetch()>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void sendStats(java.lang.String,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addTopicConfig(com.hazelcast.config.TopicConfig)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.2.2": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.util.ListenerUtil: java.lang.String listen(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.PartitionCallableRequest,int)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <init>(com.hazelcast.client.HazelcastClient,com.hazelcast.client.LoadBalancer)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.util.ListenerUtil: boolean stopListening(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.TargetCallableRequest)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>"
  ],
  "3.4.3": [
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerThread: void await()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: java.lang.Object authenticate(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.security.Credentials,com.hazelcast.client.impl.client.ClientPrincipal,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection getOrConnect(com.hazelcast.nio.Address,com.hazelcast.client.connection.Authenticator)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$OwnerConnectionFuture: com.hazelcast.client.connection.nio.ClientConnection createNew(com.hazelcast.nio.Address)>"
  ],
  "3.6.2": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: com.hazelcast.logging.ILogger getLogger()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void addNearCacheInvalidateListener()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.SerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void <clinit>()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void <init>(java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndSet(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndIncrement()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void set(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndSet(long)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Set)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.spi.discovery.integration.DiscoveryService initDiscoveryService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAdd(long)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: void <init>(com.hazelcast.client.proxy.ClientMapReduceProxy,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long decrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void set(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long addAndGet(long)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long incrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.DefaultClientConnectionManagerFactory: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: void <clinit>()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,com.hazelcast.nio.tcp.SocketChannelWrapper)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initializeSelectors(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: boolean compareAndSet(long,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.AwsAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.impl.AwsAddressTranslator: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void addNearCacheInvalidateListener(com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean isNull()>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long get()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean compareAndSet(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.spi.impl.discovery.DiscoveryAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.2.6": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.util.ListenerUtil: java.lang.String listen(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.PartitionCallableRequest,int)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <init>(com.hazelcast.client.HazelcastClient,com.hazelcast.client.LoadBalancer)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.util.ListenerUtil: boolean stopListening(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.TargetCallableRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>"
  ],
  "3.3.4": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: int size()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.HazelcastClient,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: boolean createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.impl.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerThread: void await()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: java.lang.Object authenticate(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.security.Credentials,com.hazelcast.client.impl.client.ClientPrincipal,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.impl.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.impl.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection getOrConnect(com.hazelcast.nio.Address,com.hazelcast.client.connection.Authenticator)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.HazelcastClient: com.hazelcast.nio.serialization.SerializationServiceImpl initSerializationService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$OwnerConnectionFuture: com.hazelcast.client.connection.nio.ClientConnection createNew(com.hazelcast.nio.Address)>"
  ],
  "3.4.7": [
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerThread: void await()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: java.lang.Object authenticate(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.security.Credentials,com.hazelcast.client.impl.client.ClientPrincipal,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection getOrConnect(com.hazelcast.nio.Address,com.hazelcast.client.connection.Authenticator)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$OwnerConnectionFuture: com.hazelcast.client.connection.nio.ClientConnection createNew(com.hazelcast.nio.Address)>"
  ],
  "3.1.8": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.connection.SSLSocketFactory: javax.net.ssl.SSLSocket createSocket()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.AbstractClientCollectionProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.3": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.impl.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.impl.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,int)>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.HazelcastClient: com.hazelcast.nio.serialization.SerializationServiceImpl initSerializationService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.HazelcastClient,int,int)>"
  ],
  "3.0.2": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.9": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.io.InputStream)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKeyInternal(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture putInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,boolean,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addEventJournalConfig(com.hazelcast.config.EventJournalConfig)>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addSemaphoreConfig(com.hazelcast.config.SemaphoreConfig)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void connectToCluster()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$12: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: com.hazelcast.core.ICompletableFuture subscribeToEventJournal(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void build(com.hazelcast.client.config.ClientConfig,java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture readFromEventJournal(long,int,int,int,com.hazelcast.util.function.Predicate,com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addMapConfig(com.hazelcast.config.MapConfig)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addSetConfig(com.hazelcast.config.SetConfig)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClassesFromJar(java.io.ByteArrayOutputStream,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addDurableExecutorConfig(com.hazelcast.config.DurableExecutorConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addListConfig(com.hazelcast.config.ListConfig)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClasses()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.ClientConnectionStrategy initializeStrategy(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void waitForPartitionsFetchedOnce()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: com.hazelcast.core.ICompletableFuture readFromEventJournal(long,int,int,int,com.hazelcast.util.function.Predicate,com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addReliableTopicConfig(com.hazelcast.config.ReliableTopicConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTransactionUtil: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invokeInternal(java.lang.Object,com.hazelcast.nio.serialization.Data,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAllInternal(java.util.Set,java.util.List,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback,java.util.concurrent.Executor)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.spi.impl.AbstractClientInvocationService$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: void sleepBeforeNextTry()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getSyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void connectToClusterInternal()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(java.lang.Object)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addQueueConfig(com.hazelcast.config.QueueConfig)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void getAllInternal(java.util.Set,java.util.Collection,javax.cache.expiry.ExpiryPolicy,java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClassesFromJars()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.util.ClientDelegatingFuture getAndRemoveInternal(com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$12: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: void putAllInternal(java.util.Map,javax.cache.expiry.ExpiryPolicy,java.util.Map,java.util.List[],long)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture subscribeToEventJournal(int)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: java.lang.Object newOperationTimeoutException(java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addCacheConfig(com.hazelcast.config.CacheSimpleConfig)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set,java.util.Collection,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$2: com.hazelcast.client.spi.ClientProxy create(java.lang.String,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: com.hazelcast.spi.InternalCompletableFuture getAsyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addCardinalityEstimatorConfig(com.hazelcast.config.CardinalityEstimatorConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.String removeListenerLocally(javax.cache.configuration.CacheEntryListenerConfiguration)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addReplicatedMapConfig(com.hazelcast.config.ReplicatedMapConfig)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void checkSslAllowed()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.internal.networking.nio.NioEventLoopGroup initEventLoopGroup(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.client.util.ClientDelegatingFuture getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,com.hazelcast.client.spi.ClientContext,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void closeListeners()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addMultiMapConfig(com.hazelcast.config.MultiMapConfig)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.AbstractClientListenerService: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.HeartbeatManager: void run()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAllInternal(java.util.Map,javax.cache.expiry.ExpiryPolicy,java.util.Map,java.util.List[],long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addRingBufferConfig(com.hazelcast.config.RingbufferConfig)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.config.CacheConfig,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addScheduledExecutorConfig(com.hazelcast.config.ScheduledExecutorConfig)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$3: java.lang.Void call()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.config.ClientClasspathXmlConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addExecutorConfig(com.hazelcast.config.ExecutorConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void getAllInternal(java.util.Set,java.util.Map,java.util.List)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putSyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: java.lang.Object getSyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void listenPartitionTable(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: boolean replaceSyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addLockConfig(com.hazelcast.config.LockConfig)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void deploy(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: void invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapQueryPartitionIterator: java.util.List fetch()>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void sendStats(java.lang.String,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addTopicConfig(com.hazelcast.config.TopicConfig)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.4.1": [
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerThread: void await()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: java.lang.Object authenticate(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.security.Credentials,com.hazelcast.client.impl.client.ClientPrincipal,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection getOrConnect(com.hazelcast.nio.Address,com.hazelcast.client.connection.Authenticator)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$OwnerConnectionFuture: com.hazelcast.client.connection.nio.ClientConnection createNew(com.hazelcast.nio.Address)>"
  ],
  "3.2.3": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.util.ListenerUtil: java.lang.String listen(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.PartitionCallableRequest,int)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <init>(com.hazelcast.client.HazelcastClient,com.hazelcast.client.LoadBalancer)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.util.ListenerUtil: boolean stopListening(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.TargetCallableRequest)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>"
  ],
  "3.1.9": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.connection.SSLSocketFactory: javax.net.ssl.SSLSocket createSocket()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.AbstractClientCollectionProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.5.1": [
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToOne()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeInvalidationListener(com.hazelcast.core.Member,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.impl.ClusterAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void addInvalidationListener(com.hazelcast.core.Member)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport$ManagerAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeOnTarget(com.hazelcast.client.impl.client.TargetClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String startListening(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeOnPartitionOwner(com.hazelcast.client.impl.client.ClientRequest,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.client.connection.Authenticator,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: java.lang.Object get()>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.IOSelector,int)>"
  ],
  "3.1.6": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.connection.SSLSocketFactory: javax.net.ssl.SSLSocket createSocket()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.AbstractClientCollectionProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.6.7": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: com.hazelcast.logging.ILogger getLogger()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void addNearCacheInvalidateListener()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.SerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void <clinit>()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void <init>(java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndSet(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndIncrement()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void set(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndSet(long)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Set)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.spi.discovery.integration.DiscoveryService initDiscoveryService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAdd(long)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: void <init>(com.hazelcast.client.proxy.ClientMapReduceProxy,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long decrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void set(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long addAndGet(long)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long incrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.DefaultClientConnectionManagerFactory: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: void <clinit>()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,com.hazelcast.nio.tcp.SocketChannelWrapper)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initializeSelectors(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: boolean compareAndSet(long,long)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.AwsAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.impl.AwsAddressTranslator: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void addNearCacheInvalidateListener(com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean isNull()>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long get()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean compareAndSet(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.spi.impl.discovery.DiscoveryAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.6.4": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: com.hazelcast.logging.ILogger getLogger()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void addNearCacheInvalidateListener()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.SerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void <clinit>()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void <init>(java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndSet(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndIncrement()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void set(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndSet(long)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Set)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.spi.discovery.integration.DiscoveryService initDiscoveryService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAdd(long)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: void <init>(com.hazelcast.client.proxy.ClientMapReduceProxy,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long decrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void set(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long addAndGet(long)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long incrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.DefaultClientConnectionManagerFactory: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: void <clinit>()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,com.hazelcast.nio.tcp.SocketChannelWrapper)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initializeSelectors(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: boolean compareAndSet(long,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.AwsAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.impl.AwsAddressTranslator: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void addNearCacheInvalidateListener(com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean isNull()>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long get()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean compareAndSet(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.spi.impl.discovery.DiscoveryAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.5.3": [
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToOne()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeInvalidationListener(com.hazelcast.core.Member,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.impl.ClusterAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void addInvalidationListener(com.hazelcast.core.Member)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport$ManagerAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeOnTarget(com.hazelcast.client.impl.client.TargetClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String startListening(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeOnPartitionOwner(com.hazelcast.client.impl.client.ClientRequest,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.client.ClientRequest,int)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.client.connection.Authenticator,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: java.lang.Object get()>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.IOSelector,int)>"
  ],
  "3.3.5": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: int size()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.HazelcastClient,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: boolean createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.impl.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerThread: void await()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: java.lang.Object authenticate(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.security.Credentials,com.hazelcast.client.impl.client.ClientPrincipal,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.impl.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.impl.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection getOrConnect(com.hazelcast.nio.Address,com.hazelcast.client.connection.Authenticator)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.HazelcastClient: com.hazelcast.nio.serialization.SerializationServiceImpl initSerializationService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$OwnerConnectionFuture: com.hazelcast.client.connection.nio.ClientConnection createNew(com.hazelcast.nio.Address)>"
  ],
  "3.4.2": [
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerThread: void await()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: java.lang.Object authenticate(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.security.Credentials,com.hazelcast.client.impl.client.ClientPrincipal,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection getOrConnect(com.hazelcast.nio.Address,com.hazelcast.client.connection.Authenticator)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$OwnerConnectionFuture: com.hazelcast.client.connection.nio.ClientConnection createNew(com.hazelcast.nio.Address)>"
  ],
  "3.5.2": [
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToOne()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeInvalidationListener(com.hazelcast.core.Member,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.impl.ClusterAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void addInvalidationListener(com.hazelcast.core.Member)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport$ManagerAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeOnTarget(com.hazelcast.client.impl.client.TargetClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String startListening(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeOnPartitionOwner(com.hazelcast.client.impl.client.ClientRequest,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.client.ClientRequest,int)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.client.connection.Authenticator,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: java.lang.Object get()>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.IOSelector,int)>"
  ],
  "3.0": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.7.3": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientJob: com.hazelcast.mapreduce.JobCompletableFuture invoke(com.hazelcast.mapreduce.Collator)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,byte,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void reRegisterAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void onClusterConnect(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThenInternal(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.7.4": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientJob: com.hazelcast.mapreduce.JobCompletableFuture invoke(com.hazelcast.mapreduce.Collator)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,byte,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void reRegisterAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void onClusterConnect(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThenInternal(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.4.5": [
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerThread: void await()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: java.lang.Object authenticate(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.security.Credentials,com.hazelcast.client.impl.client.ClientPrincipal,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection getOrConnect(com.hazelcast.nio.Address,com.hazelcast.client.connection.Authenticator)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$OwnerConnectionFuture: com.hazelcast.client.connection.nio.ClientConnection createNew(com.hazelcast.nio.Address)>"
  ],
  "3.1.5": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.connection.SSLSocketFactory: javax.net.ssl.SSLSocket createSocket()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.AbstractClientCollectionProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.3.3": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: int size()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.HazelcastClient,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: boolean createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.impl.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.impl.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.impl.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,int)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.HazelcastClient: com.hazelcast.nio.serialization.SerializationServiceImpl initSerializationService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>"
  ],
  "3.1.4": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.connection.SSLSocketFactory: javax.net.ssl.SSLSocket createSocket()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.AbstractClientCollectionProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.9.3": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.io.InputStream)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKeyInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientTransactionManagerServiceImpl: java.lang.Exception newOperationTimeoutException(java.lang.Throwable,long,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture putInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,boolean,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addEventJournalConfig(com.hazelcast.config.EventJournalConfig)>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addSemaphoreConfig(com.hazelcast.config.SemaphoreConfig)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void connectToCluster()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$12: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: com.hazelcast.core.ICompletableFuture subscribeToEventJournal(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void build(com.hazelcast.client.config.ClientConfig,java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture readFromEventJournal(long,int,int,int,com.hazelcast.util.function.Predicate,com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addMapConfig(com.hazelcast.config.MapConfig)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addSetConfig(com.hazelcast.config.SetConfig)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClassesFromJar(java.io.ByteArrayOutputStream,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addDurableExecutorConfig(com.hazelcast.config.DurableExecutorConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addListConfig(com.hazelcast.config.ListConfig)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClasses()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.ClientConnectionStrategy initializeStrategy(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void waitForPartitionsFetchedOnce()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: com.hazelcast.core.ICompletableFuture readFromEventJournal(long,int,int,int,com.hazelcast.util.function.Predicate,com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addReliableTopicConfig(com.hazelcast.config.ReliableTopicConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTransactionUtil: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invokeInternal(java.lang.Object,com.hazelcast.nio.serialization.Data,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAllInternal(java.util.Set,java.util.List,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback,java.util.concurrent.Executor)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.spi.impl.AbstractClientInvocationService$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: void sleepBeforeNextTry()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getSyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void connectToClusterInternal()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(java.lang.Object)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addQueueConfig(com.hazelcast.config.QueueConfig)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void getAllInternal(java.util.Set,java.util.Collection,javax.cache.expiry.ExpiryPolicy,java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClassesFromJars()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.util.ClientDelegatingFuture getAndRemoveInternal(com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$12: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: void putAllInternal(java.util.Map,javax.cache.expiry.ExpiryPolicy,java.util.Map,java.util.List[],long)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture subscribeToEventJournal(int)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: java.lang.Object newOperationTimeoutException(java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addCacheConfig(com.hazelcast.config.CacheSimpleConfig)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set,java.util.Collection,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$2: com.hazelcast.client.spi.ClientProxy create(java.lang.String,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: com.hazelcast.spi.InternalCompletableFuture getAsyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addCardinalityEstimatorConfig(com.hazelcast.config.CardinalityEstimatorConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.String removeListenerLocally(javax.cache.configuration.CacheEntryListenerConfiguration)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addReplicatedMapConfig(com.hazelcast.config.ReplicatedMapConfig)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void checkSslAllowed()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.internal.networking.nio.NioEventLoopGroup initEventLoopGroup(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.client.util.ClientDelegatingFuture getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,com.hazelcast.client.spi.ClientContext,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void closeListeners()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addMultiMapConfig(com.hazelcast.config.MultiMapConfig)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.AbstractClientListenerService: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.HeartbeatManager: void run()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAllInternal(java.util.Map,javax.cache.expiry.ExpiryPolicy,java.util.Map,java.util.List[],long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.connection.nio.ClientICMPManager: void echoFailFast()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addRingBufferConfig(com.hazelcast.config.RingbufferConfig)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.config.CacheConfig,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addScheduledExecutorConfig(com.hazelcast.config.ScheduledExecutorConfig)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.config.ClientClasspathXmlConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addExecutorConfig(com.hazelcast.config.ExecutorConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void getAllInternal(java.util.Set,java.util.Map,java.util.List)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putSyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: java.lang.Object getSyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$2: java.lang.Void call()>",
    "<com.hazelcast.client.impl.statistics.Statistics: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void listenPartitionTable(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void sleepBeforeNextTry(long)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: boolean replaceSyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addLockConfig(com.hazelcast.config.LockConfig)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void deploy(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: void invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapQueryPartitionIterator: java.util.List fetch()>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void sendStats(java.lang.String,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addTopicConfig(com.hazelcast.config.TopicConfig)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.2": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.util.ListenerUtil: java.lang.String listen(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.PartitionCallableRequest,int)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <init>(com.hazelcast.client.HazelcastClient,com.hazelcast.client.LoadBalancer)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.util.ListenerUtil: boolean stopListening(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.TargetCallableRequest)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>"
  ],
  "3.7.1": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientJob: com.hazelcast.mapreduce.JobCompletableFuture invoke(com.hazelcast.mapreduce.Collator)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThenInternal(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.5": [
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToOne()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeInvalidationListener(com.hazelcast.core.Member,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.impl.ClusterAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void addInvalidationListener(com.hazelcast.core.Member)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport$ManagerAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeOnTarget(com.hazelcast.client.impl.client.TargetClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String startListening(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeOnPartitionOwner(com.hazelcast.client.impl.client.ClientRequest,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.client.connection.Authenticator,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: java.lang.Object get()>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.IOSelector,int)>"
  ],
  "3.4.8": [
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerThread: void await()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: java.lang.Object authenticate(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.security.Credentials,com.hazelcast.client.impl.client.ClientPrincipal,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection getOrConnect(com.hazelcast.nio.Address,com.hazelcast.client.connection.Authenticator)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$OwnerConnectionFuture: com.hazelcast.client.connection.nio.ClientConnection createNew(com.hazelcast.nio.Address)>"
  ],
  "3.8.2": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List assignAndGetUuids()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientSocketWriterInitializer: void init(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.internal.networking.SocketWriter,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void <init>(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initIOThreads(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$1: com.hazelcast.client.spi.ClientProxy create(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List assignAndGetUuids()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.7.2": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientJob: com.hazelcast.mapreduce.JobCompletableFuture invoke(com.hazelcast.mapreduce.Collator)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThenInternal(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.2.4": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.util.ListenerUtil: java.lang.String listen(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.PartitionCallableRequest,int)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <init>(com.hazelcast.client.HazelcastClient,com.hazelcast.client.LoadBalancer)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.util.ListenerUtil: boolean stopListening(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.TargetCallableRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>"
  ],
  "3.7.6": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientJob: com.hazelcast.mapreduce.JobCompletableFuture invoke(com.hazelcast.mapreduce.Collator)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,byte,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThenInternal(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.6.5": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: com.hazelcast.logging.ILogger getLogger()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void addNearCacheInvalidateListener()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.SerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void <clinit>()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void <init>(java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndSet(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndIncrement()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void set(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndSet(long)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Set)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.spi.discovery.integration.DiscoveryService initDiscoveryService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAdd(long)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: void <init>(com.hazelcast.client.proxy.ClientMapReduceProxy,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long decrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void set(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long addAndGet(long)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long incrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.DefaultClientConnectionManagerFactory: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: void <clinit>()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,com.hazelcast.nio.tcp.SocketChannelWrapper)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initializeSelectors(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: boolean compareAndSet(long,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.AwsAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.impl.AwsAddressTranslator: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void addNearCacheInvalidateListener(com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean isNull()>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long get()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean compareAndSet(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.spi.impl.discovery.DiscoveryAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.6.8": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: com.hazelcast.logging.ILogger getLogger()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void addNearCacheInvalidateListener()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.SerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void <clinit>()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void <init>(java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndSet(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndIncrement()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void set(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndSet(long)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Set)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.spi.discovery.integration.DiscoveryService initDiscoveryService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAdd(long)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: void <init>(com.hazelcast.client.proxy.ClientMapReduceProxy,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long decrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void set(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long addAndGet(long)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long incrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.DefaultClientConnectionManagerFactory: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: void <clinit>()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,com.hazelcast.nio.tcp.SocketChannelWrapper)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initializeSelectors(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: boolean compareAndSet(long,long)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.AwsAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.impl.AwsAddressTranslator: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void addNearCacheInvalidateListener(com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean isNull()>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long get()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean compareAndSet(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.spi.impl.discovery.DiscoveryAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.8.6": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientSocketWriterInitializer: void init(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.internal.networking.SocketWriter,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback,java.util.concurrent.Executor)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void <init>(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.String removeListenerLocally(javax.cache.configuration.CacheEntryListenerConfiguration)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void checkSslAllowed()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initIOThreads(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void closeListeners()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$1: com.hazelcast.client.spi.ClientProxy create(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.1": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.connection.SSLSocketFactory: javax.net.ssl.SSLSocket createSocket()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.AbstractClientCollectionProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.8.3": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List assignAndGetUuids()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientSocketWriterInitializer: void init(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.internal.networking.SocketWriter,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback,java.util.concurrent.Executor)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void <init>(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initIOThreads(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$1: com.hazelcast.client.spi.ClientProxy create(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List assignAndGetUuids()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.5.5": [
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.lang.Boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToOne()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeInvalidationListener(com.hazelcast.core.Member,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.impl.ClusterAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void addInvalidationListener(com.hazelcast.core.Member)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport$ManagerAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeOnTarget(com.hazelcast.client.impl.client.TargetClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String startListening(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeOnPartitionOwner(com.hazelcast.client.impl.client.ClientRequest,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.client.ClientRequest,int)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.client.connection.Authenticator,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: java.lang.Object get()>",
    "<com.hazelcast.client.txn.proxy.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.IOSelector,int)>"
  ],
  "3.9.1": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.io.InputStream)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKeyInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientTransactionManagerServiceImpl: java.lang.Exception newOperationTimeoutException(java.lang.Throwable,long,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture putInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,boolean,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addEventJournalConfig(com.hazelcast.config.EventJournalConfig)>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addSemaphoreConfig(com.hazelcast.config.SemaphoreConfig)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void connectToCluster()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$12: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: com.hazelcast.core.ICompletableFuture subscribeToEventJournal(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void build(com.hazelcast.client.config.ClientConfig,java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture readFromEventJournal(long,int,int,int,com.hazelcast.util.function.Predicate,com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addMapConfig(com.hazelcast.config.MapConfig)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addSetConfig(com.hazelcast.config.SetConfig)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClassesFromJar(java.io.ByteArrayOutputStream,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addDurableExecutorConfig(com.hazelcast.config.DurableExecutorConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addListConfig(com.hazelcast.config.ListConfig)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClasses()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.ClientConnectionStrategy initializeStrategy(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void waitForPartitionsFetchedOnce()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: com.hazelcast.core.ICompletableFuture readFromEventJournal(long,int,int,int,com.hazelcast.util.function.Predicate,com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addReliableTopicConfig(com.hazelcast.config.ReliableTopicConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTransactionUtil: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invokeInternal(java.lang.Object,com.hazelcast.nio.serialization.Data,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAllInternal(java.util.Set,java.util.List,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback,java.util.concurrent.Executor)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.spi.impl.AbstractClientInvocationService$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: void sleepBeforeNextTry()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getSyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void connectToClusterInternal()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(java.lang.Object)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addQueueConfig(com.hazelcast.config.QueueConfig)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void getAllInternal(java.util.Set,java.util.Collection,javax.cache.expiry.ExpiryPolicy,java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClassesFromJars()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.util.ClientDelegatingFuture getAndRemoveInternal(com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$12: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: void putAllInternal(java.util.Map,javax.cache.expiry.ExpiryPolicy,java.util.Map,java.util.List[],long)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture subscribeToEventJournal(int)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: java.lang.Object newOperationTimeoutException(java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addCacheConfig(com.hazelcast.config.CacheSimpleConfig)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set,java.util.Collection,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$2: com.hazelcast.client.spi.ClientProxy create(java.lang.String,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: com.hazelcast.spi.InternalCompletableFuture getAsyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addCardinalityEstimatorConfig(com.hazelcast.config.CardinalityEstimatorConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.String removeListenerLocally(javax.cache.configuration.CacheEntryListenerConfiguration)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addReplicatedMapConfig(com.hazelcast.config.ReplicatedMapConfig)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void checkSslAllowed()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.internal.networking.nio.NioEventLoopGroup initEventLoopGroup(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.client.util.ClientDelegatingFuture getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,com.hazelcast.client.spi.ClientContext,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void closeListeners()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addMultiMapConfig(com.hazelcast.config.MultiMapConfig)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.AbstractClientListenerService: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.HeartbeatManager: void run()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAllInternal(java.util.Map,javax.cache.expiry.ExpiryPolicy,java.util.Map,java.util.List[],long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addRingBufferConfig(com.hazelcast.config.RingbufferConfig)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.config.CacheConfig,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addScheduledExecutorConfig(com.hazelcast.config.ScheduledExecutorConfig)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$3: java.lang.Void call()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.config.ClientClasspathXmlConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addExecutorConfig(com.hazelcast.config.ExecutorConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void getAllInternal(java.util.Set,java.util.Map,java.util.List)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putSyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: java.lang.Object getSyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void listenPartitionTable(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: boolean replaceSyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addLockConfig(com.hazelcast.config.LockConfig)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void deploy(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: void invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapQueryPartitionIterator: java.util.List fetch()>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void sendStats(java.lang.String,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addTopicConfig(com.hazelcast.config.TopicConfig)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.6.3": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: com.hazelcast.logging.ILogger getLogger()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void addNearCacheInvalidateListener()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.SerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void <clinit>()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void <init>(java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndSet(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndIncrement()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void set(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndSet(long)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Set)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.spi.discovery.integration.DiscoveryService initDiscoveryService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAdd(long)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: void <init>(com.hazelcast.client.proxy.ClientMapReduceProxy,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long decrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void set(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long addAndGet(long)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long incrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.DefaultClientConnectionManagerFactory: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: void <clinit>()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,com.hazelcast.nio.tcp.SocketChannelWrapper)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initializeSelectors(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: boolean compareAndSet(long,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.AwsAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.impl.AwsAddressTranslator: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void addNearCacheInvalidateListener(com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean isNull()>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long get()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean compareAndSet(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.spi.impl.discovery.DiscoveryAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.1.7": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.connection.SSLSocketFactory: javax.net.ssl.SSLSocket createSocket()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.AbstractClientCollectionProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.2.1": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.util.ListenerUtil: java.lang.String listen(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.PartitionCallableRequest,int)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <init>(com.hazelcast.client.HazelcastClient,com.hazelcast.client.LoadBalancer)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.util.ListenerUtil: boolean stopListening(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.TargetCallableRequest)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>"
  ],
  "3.7.7": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientJob: com.hazelcast.mapreduce.JobCompletableFuture invoke(com.hazelcast.mapreduce.Collator)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,byte,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThenInternal(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.1.1": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.connection.SSLSocketFactory: javax.net.ssl.SSLSocket createSocket()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.AbstractClientCollectionProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.2.5": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.util.ListenerUtil: java.lang.String listen(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.PartitionCallableRequest,int)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <init>(com.hazelcast.client.HazelcastClient,com.hazelcast.client.LoadBalancer)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.util.ListenerUtil: boolean stopListening(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.TargetCallableRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>"
  ],
  "3.8.1": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List assignAndGetUuids()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientSocketWriterInitializer: void init(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.internal.networking.SocketWriter,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,byte,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void <init>(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.map.impl.querycache.QueryCacheContext getQueryContext()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initIOThreads(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$1: com.hazelcast.client.spi.ClientProxy create(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List assignAndGetUuids()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.7.5": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientJob: com.hazelcast.mapreduce.JobCompletableFuture invoke(com.hazelcast.mapreduce.Collator)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,byte,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void reRegisterAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void onClusterConnect(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThenInternal(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.8.5": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientSocketWriterInitializer: void init(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.internal.networking.SocketWriter,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback,java.util.concurrent.Executor)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void <init>(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.String removeListenerLocally(javax.cache.configuration.CacheEntryListenerConfiguration)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void checkSslAllowed()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initIOThreads(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void closeListeners()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$1: com.hazelcast.client.spi.ClientProxy create(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.3.1": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: int size()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.HazelcastClient,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: boolean createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.impl.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.impl.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.impl.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,int)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyInternal: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.HazelcastClient: com.hazelcast.nio.serialization.SerializationServiceImpl initSerializationService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.impl.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyExtension: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>"
  ],
  "3.7": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientJob: com.hazelcast.mapreduce.JobCompletableFuture invoke(com.hazelcast.mapreduce.Collator)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThenInternal(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,boolean,com.hazelcast.logging.LoggingService)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.2.7": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.util.ListenerUtil: java.lang.String listen(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.PartitionCallableRequest,int)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <init>(com.hazelcast.client.HazelcastClient,com.hazelcast.client.LoadBalancer)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.util.ListenerUtil: boolean stopListening(com.hazelcast.client.spi.ClientContext,com.hazelcast.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.client.TargetCallableRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.ClientRequest)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>"
  ],
  "3.4.6": [
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerThread: void await()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: java.lang.Object authenticate(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.security.Credentials,com.hazelcast.client.impl.client.ClientPrincipal,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection getOrConnect(com.hazelcast.nio.Address,com.hazelcast.client.connection.Authenticator)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$OwnerConnectionFuture: com.hazelcast.client.connection.nio.ClientConnection createNew(com.hazelcast.nio.Address)>"
  ],
  "3.8": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List assignAndGetUuids()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientSocketWriterInitializer: void init(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.internal.networking.SocketWriter,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientJob: com.hazelcast.mapreduce.JobCompletableFuture invoke(com.hazelcast.mapreduce.Collator)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,byte,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void <init>(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.map.impl.querycache.QueryCacheContext getQueryContext()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initIOThreads(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$1: com.hazelcast.client.spi.ClientProxy create(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: void andThenInternal(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List assignAndGetUuids()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.10": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.io.InputStream)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKeyInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientTransactionManagerServiceImpl: java.lang.Exception newOperationTimeoutException(java.lang.Throwable,long,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture putInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,boolean,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addEventJournalConfig(com.hazelcast.config.EventJournalConfig)>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addSemaphoreConfig(com.hazelcast.config.SemaphoreConfig)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void connectToCluster()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$12: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.statistics.Statistics$PeriodicStatistics: void fillMetrics(java.lang.StringBuilder,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.config.ClientConfig: com.hazelcast.config.NearCacheConfig getNearCacheConfig(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: com.hazelcast.core.ICompletableFuture subscribeToEventJournal(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void build(com.hazelcast.client.config.ClientConfig,java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture readFromEventJournal(long,int,int,int,com.hazelcast.util.function.Predicate,com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addMapConfig(com.hazelcast.config.MapConfig)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addSetConfig(com.hazelcast.config.SetConfig)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClassesFromJar(java.io.ByteArrayOutputStream,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroyRemotely()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addDurableExecutorConfig(com.hazelcast.config.DurableExecutorConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addListConfig(com.hazelcast.config.ListConfig)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addPNCounterConfig(com.hazelcast.config.PNCounterConfig)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClasses()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.ClientConnectionStrategy initializeStrategy(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void waitForPartitionsFetchedOnce()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: com.hazelcast.core.ICompletableFuture readFromEventJournal(long,int,int,int,com.hazelcast.util.function.Predicate,com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.config.ClientConfig: com.hazelcast.config.QueryCacheConfig getOrNullQueryCacheConfig(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.config.ClientConfig: com.hazelcast.client.config.ClientReliableTopicConfig getReliableTopicConfig(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addReliableTopicConfig(com.hazelcast.config.ReliableTopicConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTransactionUtil: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invokeInternal(java.lang.Object,com.hazelcast.nio.serialization.Data,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAllInternal(java.util.Set,java.util.List,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback,java.util.concurrent.Executor)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientFlakeIdGeneratorProxy: void <init>(java.lang.String,java.lang.String,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: void sleepBeforeNextTry()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getSyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void connectToClusterInternal()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(java.lang.Object)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addQueueConfig(com.hazelcast.config.QueueConfig)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void getAllInternal(java.util.Set,java.util.Collection,javax.cache.expiry.ExpiryPolicy,java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClassesFromJars()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.util.ClientDelegatingFuture getAndRemoveInternal(com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$12: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: void putAllInternal(java.util.Map,javax.cache.expiry.ExpiryPolicy,java.util.Map,java.util.List[],long)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture subscribeToEventJournal(int)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: java.lang.Object newOperationTimeoutException(java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addCacheConfig(com.hazelcast.config.CacheSimpleConfig)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set,java.util.Collection,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.config.ClientConfig: com.hazelcast.config.QueryCacheConfig getOrCreateQueryCacheConfig(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addFlakeIdGeneratorConfig(com.hazelcast.config.FlakeIdGeneratorConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$2: com.hazelcast.client.spi.ClientProxy create(java.lang.String,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addAtomicReferenceConfig(com.hazelcast.config.AtomicReferenceConfig)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: com.hazelcast.spi.InternalCompletableFuture getAsyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addCardinalityEstimatorConfig(com.hazelcast.config.CardinalityEstimatorConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientPNCounterProxy: int getMaxConfiguredReplicaCount()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.String removeListenerLocally(javax.cache.configuration.CacheEntryListenerConfiguration)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addReplicatedMapConfig(com.hazelcast.config.ReplicatedMapConfig)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addAtomicLongConfig(com.hazelcast.config.AtomicLongConfig)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientFlakeIdGeneratorProxy: com.hazelcast.flakeidgen.impl.IdBatch newIdBatch(int)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void checkSslAllowed()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.internal.networking.nio.NioEventLoopGroup initEventLoopGroup(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void validateCacheConfig(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.client.util.ClientDelegatingFuture getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,com.hazelcast.client.spi.ClientContext,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.config.ClientConfig: com.hazelcast.client.config.ClientFlakeIdGeneratorConfig findFlakeIdGeneratorConfig(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void closeListeners()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addMultiMapConfig(com.hazelcast.config.MultiMapConfig)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.AbstractClientListenerService: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.HeartbeatManager: void run()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAllInternal(java.util.Map,javax.cache.expiry.ExpiryPolicy,java.util.Map,java.util.List[],long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.HeartbeatManager: void checkConnection(long,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.connection.nio.ClientICMPManager: void echoFailFast()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addRingBufferConfig(com.hazelcast.config.RingbufferConfig)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addCountDownLatchConfig(com.hazelcast.config.CountDownLatchConfig)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addScheduledExecutorConfig(com.hazelcast.config.ScheduledExecutorConfig)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.config.ClientClasspathXmlConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addExecutorConfig(com.hazelcast.config.ExecutorConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void getAllInternal(java.util.Set,java.util.Map,java.util.List)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putSyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: java.lang.Object getSyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$2: java.lang.Void call()>",
    "<com.hazelcast.client.impl.statistics.Statistics: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void listenPartitionTable(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void sleepBeforeNextTry(long)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: boolean replaceSyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addLockConfig(com.hazelcast.config.LockConfig)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.config.ClientConfig: com.hazelcast.client.config.ClientFlakeIdGeneratorConfig getFlakeIdGeneratorConfig(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void deploy(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: void invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapQueryPartitionIterator: java.util.List fetch()>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void increasePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void sendStats(java.lang.String,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.spi.ProxyManager: void createDistributedObjectsOnCluster(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientPNCounterProxy: com.hazelcast.client.impl.protocol.ClientMessage invokeAddInternal(long,boolean,java.util.List,com.hazelcast.core.HazelcastException,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.spi.impl.ClientResponseHandlerSupplier$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientPNCounterProxy: com.hazelcast.client.impl.protocol.ClientMessage invokeGetInternal(java.util.List,com.hazelcast.core.HazelcastException,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addTopicConfig(com.hazelcast.config.TopicConfig)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.4.4": [
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerThread: void await()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: java.lang.Object authenticate(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.security.Credentials,com.hazelcast.client.impl.client.ClientPrincipal,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection getOrConnect(com.hazelcast.nio.Address,com.hazelcast.client.connection.Authenticator)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$OwnerConnectionFuture: com.hazelcast.client.connection.nio.ClientConnection createNew(com.hazelcast.nio.Address)>"
  ],
  "3.8.4": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientSocketWriterInitializer: void init(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.internal.networking.SocketWriter,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback,java.util.concurrent.Executor)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void <init>(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initIOThreads(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$1: com.hazelcast.client.spi.ClientProxy create(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.9.4": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.io.InputStream)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKeyInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientTransactionManagerServiceImpl: java.lang.Exception newOperationTimeoutException(java.lang.Throwable,long,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture putInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,boolean,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addEventJournalConfig(com.hazelcast.config.EventJournalConfig)>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addSemaphoreConfig(com.hazelcast.config.SemaphoreConfig)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void connectToCluster()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$12: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.statistics.Statistics$PeriodicStatistics: void fillMetrics(java.lang.StringBuilder,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: com.hazelcast.core.ICompletableFuture subscribeToEventJournal(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void build(com.hazelcast.client.config.ClientConfig,java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture readFromEventJournal(long,int,int,int,com.hazelcast.util.function.Predicate,com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addMapConfig(com.hazelcast.config.MapConfig)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addSetConfig(com.hazelcast.config.SetConfig)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClassesFromJar(java.io.ByteArrayOutputStream,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroyRemotely()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addDurableExecutorConfig(com.hazelcast.config.DurableExecutorConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addListConfig(com.hazelcast.config.ListConfig)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClasses()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.ClientConnectionStrategy initializeStrategy(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void waitForPartitionsFetchedOnce()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: com.hazelcast.core.ICompletableFuture readFromEventJournal(long,int,int,int,com.hazelcast.util.function.Predicate,com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addReliableTopicConfig(com.hazelcast.config.ReliableTopicConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTransactionUtil: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invokeInternal(java.lang.Object,com.hazelcast.nio.serialization.Data,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAllInternal(java.util.Set,java.util.List,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback,java.util.concurrent.Executor)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.spi.impl.AbstractClientInvocationService$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: void sleepBeforeNextTry()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getSyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void connectToClusterInternal()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(java.lang.Object)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addQueueConfig(com.hazelcast.config.QueueConfig)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void getAllInternal(java.util.Set,java.util.Collection,javax.cache.expiry.ExpiryPolicy,java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void loadClassesFromJars()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.util.ClientDelegatingFuture getAndRemoveInternal(com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$12: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: void putAllInternal(java.util.Map,javax.cache.expiry.ExpiryPolicy,java.util.Map,java.util.List[],long)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture subscribeToEventJournal(int)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: java.lang.Object newOperationTimeoutException(java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addCacheConfig(com.hazelcast.config.CacheSimpleConfig)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set,java.util.Collection,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$2: com.hazelcast.client.spi.ClientProxy create(java.lang.String,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: com.hazelcast.spi.InternalCompletableFuture getAsyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.spi.ProxyManager: void invokeCreateProxy(com.hazelcast.nio.Connection,com.hazelcast.spi.ObjectNamespace,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addCardinalityEstimatorConfig(com.hazelcast.config.CardinalityEstimatorConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.String removeListenerLocally(javax.cache.configuration.CacheEntryListenerConfiguration)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addReplicatedMapConfig(com.hazelcast.config.ReplicatedMapConfig)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void checkSslAllowed()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.internal.networking.nio.NioEventLoopGroup initEventLoopGroup(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.client.util.ClientDelegatingFuture getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,com.hazelcast.client.spi.ClientContext,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void closeListeners()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addMultiMapConfig(com.hazelcast.config.MultiMapConfig)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.AbstractClientListenerService: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.HeartbeatManager: void run()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAllInternal(java.util.Map,javax.cache.expiry.ExpiryPolicy,java.util.Map,java.util.List[],long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.connection.nio.ClientICMPManager: void echoFailFast()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addRingBufferConfig(com.hazelcast.config.RingbufferConfig)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.config.CacheConfig,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addScheduledExecutorConfig(com.hazelcast.config.ScheduledExecutorConfig)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.config.ClientClasspathXmlConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl$RefreshTask: void run()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addExecutorConfig(com.hazelcast.config.ExecutorConfig)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void getAllInternal(java.util.Set,java.util.Map,java.util.List)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putSyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: java.lang.Object getSyncInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$2: java.lang.Void call()>",
    "<com.hazelcast.client.impl.statistics.Statistics: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void listenPartitionTable(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.NearCachedClientCacheProxy: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void sleepBeforeNextTry(long)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: boolean replaceSyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addLockConfig(com.hazelcast.config.LockConfig)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientUserCodeDeploymentService: void deploy(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: void invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$11: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapQueryPartitionIterator: java.util.List fetch()>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.statistics.Statistics: void sendStats(java.lang.String,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.spi.impl.listener.SmartClientListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.NonSmartClientListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.impl.ClientDynamicClusterConfig: com.hazelcast.config.Config addTopicConfig(com.hazelcast.config.TopicConfig)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.0.3": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.4": [
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object get(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerThread: void await()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: java.lang.Object authenticate(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.security.Credentials,com.hazelcast.client.impl.client.ClientPrincipal,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean putIfAbsent(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsync(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.PartitionCallableRequest,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.core.ICompletableFuture invokeFuture(com.hazelcast.executor.impl.client.TargetCallableRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture invoke(com.hazelcast.client.impl.client.ClientRequest,com.hazelcast.nio.serialization.Data,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal(java.util.Set,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: com.hazelcast.core.ICompletableFuture getAsync(java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsync(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture putIfAbsentAsyncInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: boolean stopListening(com.hazelcast.client.impl.client.BaseClientRemoveListenerRequest,java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: boolean recover(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void write(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKey(java.lang.Object,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$ConnectionProcessor: com.hazelcast.client.connection.nio.ClientConnection call()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future getAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.txn.ClientTransactionManager: javax.transaction.xa.Xid[] recover()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceImpl$ResponseThread: void run()>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: java.util.concurrent.Future invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.nio.serialization.SerializationService createSerializationService()>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection getOrConnect(com.hazelcast.nio.Address,com.hazelcast.client.connection.Authenticator)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.client.ClientRequest)>",
    "<com.hazelcast.client.util.ClientCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientCallFuture: java.lang.Object get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndPut(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance instanceFromProperties(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void put(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientListenerServiceImpl: java.lang.String listen(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeInterruptibly(com.hazelcast.client.impl.client.ClientRequest,java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.txn.TransactionProxy: void prepare()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$OwnerConnectionFuture: com.hazelcast.client.connection.nio.ClientConnection createNew(com.hazelcast.nio.Address)>"
  ],
  "3.8.7": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void sleepBeforeNextTry()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientSocketWriterInitializer: void init(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.internal.networking.SocketWriter,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback,java.util.concurrent.Executor)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void <init>(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: java.lang.Object newOperationTimeoutException(java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.String removeListenerLocally(javax.cache.configuration.CacheEntryListenerConfiguration)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void checkSslAllowed()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initIOThreads(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void closeListeners()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$1: com.hazelcast.client.spi.ClientProxy create(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.0.1": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.6.6": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: com.hazelcast.logging.ILogger getLogger()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.nio.Address,com.hazelcast.client.connection.nio.ClientConnection,boolean,com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$AuthenticationFuture)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void addNearCacheInvalidateListener()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.SerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void <clinit>()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void <init>(java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndSet(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndIncrement()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void set(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndSet(long)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Set)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.spi.discovery.integration.DiscoveryService initDiscoveryService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAdd(long)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: void <init>(com.hazelcast.client.proxy.ClientMapReduceProxy,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long decrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void set(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long addAndGet(long)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long incrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.DefaultClientConnectionManagerFactory: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: void <clinit>()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,com.hazelcast.nio.tcp.SocketChannelWrapper)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initializeSelectors(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: boolean compareAndSet(long,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.AwsAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.impl.AwsAddressTranslator: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void addNearCacheInvalidateListener(com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean isNull()>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long get()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean compareAndSet(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.spi.impl.discovery.DiscoveryAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.8.9": [
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean cancel(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.InternalSerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.impl.protocol.ClientMessage encodeAuthenticationRequest(boolean,com.hazelcast.spi.serialization.SerializationService,com.hazelcast.client.impl.client.ClientPrincipal)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isDone()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void sleepBeforeNextTry()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <init>(com.hazelcast.client.config.ClientConfig,com.hazelcast.client.impl.ClientConnectionManagerFactory,com.hazelcast.client.connection.AddressProvider)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: java.lang.String addListener(java.lang.String,com.hazelcast.map.impl.ListenerAdapter,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void <init>(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: boolean isCancelled()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture clearAsync()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: void dispose()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.cache.impl.ICacheInternal createCacheProxy(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: void enableStatisticManagementOnNodes(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveAndDisposeResult(long)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToCluster()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: java.util.List fetch()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: com.hazelcast.scheduledexecutor.ScheduledTaskStatistics getStats()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAsync()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(long)>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(long,long)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture incrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig createCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.util.concurrent.ConcurrentMap,java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientSocketWriterInitializer: void init(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.internal.networking.SocketWriter,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$10: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback,java.util.concurrent.Executor)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture decrementAndGetAsync()>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.impl.querycache.subscriber.QueryCacheToListenerMapper: boolean removeListener(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.nio.Connection getOrConnect(com.hazelcast.nio.Address,boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: boolean removeListener(java.lang.String,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void <init>(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternalSync(java.lang.Object,boolean,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.spi.impl.ClientInvocationFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture setAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void queryCacheIndexesHandle(org.w3c.dom.Node,com.hazelcast.config.QueryCacheConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void andThen(com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture compareAndSetAsync(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture addAndGetAsync(long)>",
    "<com.hazelcast.client.spi.ClientContext: com.hazelcast.internal.nearcache.impl.invalidation.RepairingTask getRepairingTask(java.lang.String)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.client.util.ClientDelegatingFuture doSubmitOnAddress(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatReceived()>",
    "<com.hazelcast.client.proxy.PartitionSpecificClientProxy: com.hazelcast.client.util.ClientDelegatingFuture invokeOnPartitionAsync(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.client.impl.ClientMessageDecoder)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture estimateAsync()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.proxy.ClientCardinalityEstimatorProxy: com.hazelcast.spi.InternalCompletableFuture addAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: java.util.Map getAllScheduledFutures()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: com.hazelcast.durableexecutor.DurableExecutorServiceFuture submitToPartition(java.util.concurrent.Callable,int,java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$Heartbeat: void run()>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: java.util.List scanMembers(java.util.List)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.OneShotExecutionCallback: void onInternal(java.lang.Object,boolean,long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: java.lang.Object newOperationTimeoutException(java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.nearcache.invalidation.ClientCacheMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.map.impl.nearcache.invalidation.ClientMapMetaDataFetcher: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void madePublishable(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternalSync(java.lang.Object,long,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.client.util.ClientDelegatingFuture)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: void invoke(com.hazelcast.client.spi.impl.listener.ClientRegistrationKey,com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: long getDelay(java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndAlterAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture containsAsync(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeAllInternal(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: boolean deregisterListener(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture isNullAsync()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture alterAndGetAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.String removeListenerLocally(javax.cache.configuration.CacheEntryListenerConfiguration)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndAddAsync(long)>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: java.util.concurrent.Future retrieveResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.IExecutorDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object join()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void createPublishAccumulatorWithoutIncludeValue(com.hazelcast.map.impl.querycache.accumulator.AccumulatorInfo)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnPartition(java.lang.String,com.hazelcast.scheduledexecutor.impl.TaskDefinition,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void checkSslAllowed()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: void <clinit>()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createRecoveryOperation(java.lang.String,java.lang.String,long,int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientInvokerWrapper: java.lang.Object invokeOnAllPartitions(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientNonSmartListenerService: java.util.Collection getActiveRegistrations(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: void <init>(com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture getAndSetAsync(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initIOThreads(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.config.ClientConfig getConfigFromLocation(java.net.URI,java.lang.ClassLoader,java.lang.String)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void closeListeners()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void disposeResult(long)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientSubscriberContextSupport: java.lang.Object createDestroyQueryCacheOperation(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture setAsync(java.lang.Object)>",
    "<com.hazelcast.client.impl.DefaultClientExtension$1: com.hazelcast.client.spi.ClientProxy create(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.util.ClientDelegatingFuture: java.lang.Object decodeResponse(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.listener.ClientSmartListenerService: java.lang.String registerListener(com.hazelcast.client.spi.impl.ListenerMessageCodec,com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientScheduledFutureProxy: java.lang.Object get0(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithoutPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService: java.lang.String addListener(java.lang.String,java.lang.String,com.hazelcast.map.listener.MapListener,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.CallbackAwareClientDelegatingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: com.hazelcast.spi.InternalCompletableFuture getAndIncrementAsync()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void setConnectedServerVersion(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheHelper: com.hazelcast.config.CacheConfig getCacheConfig(com.hazelcast.client.impl.HazelcastClientInstanceImpl,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEventService$EventDispatcher: boolean canPassFilter(com.hazelcast.map.impl.querycache.event.LocalEntryEventData,com.hazelcast.spi.EventFilter)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.ClientLoggingService: com.hazelcast.logging.ILogger getLogger(java.lang.Class)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: com.hazelcast.spi.InternalCompletableFuture applyAsync(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection project(com.hazelcast.projection.Projection,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientScheduledExecutorProxy: com.hazelcast.scheduledexecutor.IScheduledFuture scheduleOnMember(java.lang.String,com.hazelcast.core.Member,com.hazelcast.scheduledexecutor.impl.TaskDefinition)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.spi.ProxyManager: void readProxyDescriptors()>",
    "<com.hazelcast.client.proxy.ClientDurableExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object aggregate(com.hazelcast.aggregation.Aggregator,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void onHeartbeatRequested()>",
    "<com.hazelcast.client.map.impl.ClientMapPartitionIterator: java.util.List fetchWithPrefetchValues(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.impl.querycache.subscriber.ClientQueryCacheEndToEndConstructor: void <init>(com.hazelcast.map.impl.querycache.subscriber.QueryCacheRequest)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>"
  ],
  "3.1.3": [
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.nearcache.ClientNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.HazelcastClient: void <init>(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.connection.SSLSocketFactory: javax.net.ssl.SSLSocket createSocket()>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.proxy.ClientTxnProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void _sendAndHandle(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object,com.hazelcast.client.spi.ResponseHandler)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.AbstractClientCollectionProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: java.lang.Object _sendAndReceive(com.hazelcast.client.spi.impl.ClientClusterServiceImpl$ConnectionFactory,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.HazelcastClient: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: java.lang.Object invoke(java.lang.Object)>",
    "<com.hazelcast.client.txn.TransactionProxy: java.lang.Object sendAndReceive(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.lang.Object invoke(java.lang.Object,com.hazelcast.nio.Address)>"
  ],
  "3.6.1": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: com.hazelcast.logging.ILogger getLogger()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void addNearCacheInvalidateListener()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.ClusterAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.SerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void <clinit>()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void <init>(java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndSet(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.client.connection.Authenticator,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndIncrement()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void set(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndSet(long)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Set)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.spi.discovery.integration.DiscoveryService initDiscoveryService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToOne()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAdd(long)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: void <init>(com.hazelcast.client.proxy.ClientMapReduceProxy,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long decrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void set(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long addAndGet(long)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long incrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.DefaultClientConnectionManagerFactory: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: void <clinit>()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,com.hazelcast.nio.tcp.SocketChannelWrapper)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initializeSelectors(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: boolean compareAndSet(long,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.AwsAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.impl.AwsAddressTranslator: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void addNearCacheInvalidateListener(com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean isNull()>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport$ManagerAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long get()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean compareAndSet(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.spi.impl.discovery.DiscoveryAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ],
  "3.6": [
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsEntry(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isShutdown()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: com.hazelcast.logging.ILogger getLogger()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: long getClusterTime()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putAll(java.util.Map,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean init(int)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartition(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAll(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: void add(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object peek(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToRandomInternal(java.util.concurrent.Callable,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void putAll(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long headSequence()>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean cancel(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void addNearCacheInvalidateListener()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.ProxyManager$ClientProxyFuture: com.hazelcast.client.spi.ClientProxy get()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future putAsyncInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putIfAbsentInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.ClusterAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: void enableStatisticManagementOnNodes(java.lang.String,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: void countDown()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleListAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int remainingCapacity()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean tryLock(long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long capacity()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void reducePermits(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clearNearCachesOnLiteMembers()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object getAndRemove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.config.ClientConfig: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putTransientInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfigOnPartition(com.hazelcast.config.CacheConfig)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void start()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$6: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void clear()>",
    "<com.hazelcast.client.impl.DefaultClientExtension: com.hazelcast.internal.serialization.SerializationService createSerializationService(byte)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAsync(java.lang.Object,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void <clinit>()>",
    "<com.hazelcast.client.spi.ProxyManager: com.hazelcast.client.spi.ClientProxy getOrCreateProxy(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleQOfferMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void shutdown()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void <init>(java.lang.String,com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndSet(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: void destroy()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getAndReplace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: java.util.Collection getDistributedObjects()>",
    "<com.hazelcast.client.proxy.ClientListProxy: int size()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void authenticate(com.hazelcast.client.connection.Authenticator,com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean trySetCount(int)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndIncrement()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void deleteInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnTarget(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void clearInternal()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void updateCacheListenerConfigOnOtherNodes(javax.cache.configuration.CacheEntryListenerConfiguration,boolean)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int availablePermits()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.List getAllInternal(java.util.Map,java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientWriteHandler: void handle()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySetWithPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void set(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndSet(long)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.ListIterator listIterator(int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.security.Credentials initCredentials(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void loadAllInternal(boolean,java.util.Set)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void commit()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void handleFailureOnCompletionListener(javax.cache.integration.CompletionListener,java.lang.Throwable)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int drainTo(java.util.Collection,int)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: javax.transaction.xa.Xid[] recover(int)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: boolean isSyncComputation(boolean)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireTtlCleanup()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void waitResponseFromAllPartitionsForPutAll(java.util.List,long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object putInternal(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.spi.discovery.integration.DiscoveryService initDiscoveryService(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.proxy.ClientReliableTopicProxy: void publish(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void beforeAwait(long)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture getAndRemoveAsyncInternal(java.lang.Object,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean removeInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.config.QueryCacheConfigBuilderHelper: void <init>()>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: int size()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void connectToOne()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object getForUpdate(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationServiceSupport$ResponseThread: void run()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture replaceAndGetAsyncInternal(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean,boolean,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object replaceInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAdd(long)>",
    "<com.hazelcast.client.spi.ProxyManager: void init(com.hazelcast.client.config.ClientConfig)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invokeOnPartitionInterruptibly(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: void <init>(com.hazelcast.client.proxy.ClientMapReduceProxy,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long decrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void set(long)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void finalizeTransactionRemotely(javax.transaction.xa.Xid,boolean)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean doAwait(long,java.util.concurrent.TimeUnit,long)>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: com.hazelcast.client.ClientExtension createClientInitializer(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryRemoveInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void listenMembershipEvents(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object get(int)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void handle()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllKeysInternal(java.util.Set)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: void putToAllPartitionsAndWaitForCompletion(java.util.List[],javax.cache.expiry.ExpiryPolicy,long)>",
    "<com.hazelcast.client.spi.ClientProxy: void destroy()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lockInterruptibly()>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientCompletableFuture: boolean shouldCancel(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void destroy()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLocked()>",
    "<com.hazelcast.client.impl.HazelcastClientInstanceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void rollback()>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: boolean awaitUntil(java.util.Date)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void set(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: boolean isLockedByCurrentThread()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection valuesForPagingPredicate(com.hazelcast.query.PagingPredicate)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl$HeartBeat: void run()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetRemoveMany(java.lang.String[])>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long tailSequence()>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: java.lang.Object getSafely(java.util.concurrent.Future)>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.config.XmlClientConfigLocator: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object take()>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleSetAddMany(java.lang.String[])>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long addAndGet(long)>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: com.hazelcast.client.config.ClientConfig build(java.lang.ClassLoader)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: int getCount()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: com.hazelcast.client.spi.EventHandler createHandler(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.monitor.LocalMapStats getLocalMapStats()>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long size()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.core.ICompletableFuture removeAsyncInternal(java.lang.Object,java.lang.Object,boolean,boolean,boolean)>",
    "<com.hazelcast.client.spi.ProxyManager: void initialize(com.hazelcast.client.spi.ClientProxy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void checkTimeout()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long incrementAndGet()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object get()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void evictAll()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection get(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void <init>(java.lang.String,com.hazelcast.client.spi.ClientContext,com.hazelcast.config.NearCacheConfig)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void rollback()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: org.w3c.dom.Document parse(java.io.InputStream)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleMapPutMany(java.lang.String[])>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig getCacheConfigFromPartition(java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int lastIndexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future removeAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean containsAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void alter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.util.Map getAll(java.util.Set,javax.cache.expiry.ExpiryPolicy)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object executeOnKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: int drainPermits()>",
    "<com.hazelcast.client.spi.ProxyManager: java.lang.Object instantiateClientProxy(java.lang.Class,java.lang.String,java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.listener.ClientListenerServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int,int)>",
    "<com.hazelcast.client.spi.impl.ClientPartitionServiceImpl: com.hazelcast.client.spi.impl.ClientInvocationFuture getPartitionsFrom(com.hazelcast.nio.Connection)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.client.impl.protocol.codec.MapRemoveCodec$ResponseParameters removeInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy: com.hazelcast.client.impl.protocol.ClientMessage getRequest(java.lang.String,java.lang.String,java.util.Collection,com.hazelcast.mapreduce.KeyPredicate,com.hazelcast.mapreduce.Mapper,com.hazelcast.mapreduce.CombinerFactory,com.hazelcast.mapreduce.ReducerFactory,com.hazelcast.mapreduce.KeyValueSource,int,com.hazelcast.mapreduce.TopologyChangedStrategy)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: java.util.Collection getAll()>",
    "<com.hazelcast.client.proxy.ClientListProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.util.Set entrySet()>",
    "<com.hazelcast.client.spi.impl.ClientMembershipListener: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void setInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.connection.nio.AbstractClientSelectionHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: long getRemainingLeaseTime()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: void <init>(com.hazelcast.config.CacheConfig,com.hazelcast.client.spi.ClientContext)>",
    "<com.hazelcast.client.proxy.ClientCountDownLatchProxy: boolean await(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnQueueProxy: int size()>",
    "<com.hazelcast.client.cache.impl.ClientClusterWideIterator: com.hazelcast.cache.impl.CacheKeyIteratorResult fetch()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: int size()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submitInternal(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object set(int,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void clear()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.core.HazelcastInstance getOrCreateInstance(java.lang.ClassLoader,java.util.Properties,boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long remainingCapacity()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.lang.Object remove(int)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void fireEvictCache()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientListProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$4: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void lock(java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: boolean tryAcquire()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture readManyAsync(long,int,int,com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void begin()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: int valueCount(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: void loadAll(java.util.Set,boolean,javax.cache.integration.CompletionListener)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$9: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.AddressHelper: java.util.Collection getPossibleSocketAddresses(int,java.lang.String,int)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean isEmpty()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void commit(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnSetProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.util.ClientPartitionCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object peek()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set entrySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.impl.DefaultClientConnectionManagerFactory: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void forceUnlock()>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object[] toArray(java.lang.Object[])>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: void submitToRandomInternal(java.util.concurrent.Callable,com.hazelcast.core.ExecutionCallback)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.spi.impl.ClientInvocation: void <clinit>()>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientTopicProxy$Codec: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: long add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void removeInterceptor(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XATransactionProxy: void prepare()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void addIndex(java.lang.String,boolean)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: java.lang.Object invoke(java.lang.Object,javax.cache.processor.EntryProcessor,java.lang.Object[])>",
    "<com.hazelcast.client.connection.nio.ClientConnection: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int,com.hazelcast.nio.tcp.SocketChannelWrapper)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invokeOnPartitionOwner(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.util.ClientAddressCancellableDelegatingFuture: boolean invokeCancelRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: java.lang.Object apply(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void unlock()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: void delete(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object getInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: void removeAllInternal()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void lock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy: com.hazelcast.client.spi.impl.ClientInvocationFuture invoke(com.hazelcast.client.impl.protocol.ClientMessage,int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$7: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object getAndAlter(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache$2: void run()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: boolean removeAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: void initializeSelectors(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: void forceUnlock(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean contains(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean addAll(int,java.util.Collection)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean containsKey(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean isLocked(java.lang.Object)>",
    "<com.hazelcast.client.map.impl.nearcache.ClientHeapNearCache: void put(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void acquire(int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addInterceptor(com.hazelcast.map.MapInterceptor)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: boolean compareAndSet(long,long)>",
    "<com.hazelcast.client.proxy.ClientListProxy: int indexOf(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: void lock()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnKeys(java.util.Set,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean evictInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object get(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.map.listener.MapListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.connection.nio.ClientReadHandler: void <init>(com.hazelcast.client.connection.nio.ClientConnection,com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThread,int)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: com.hazelcast.core.ICompletableFuture addAllAsync(java.util.Collection,com.hazelcast.ringbuffer.OverflowPolicy)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean tryPutInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.Object putIfAbsentInternal(long,java.util.concurrent.TimeUnit,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Set keySet()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object setAndGet(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.AwsAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.concurrent.Future submitToKeyInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.map.EntryProcessor)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signalAll()>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.util.Iterator iterator()>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean add(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void flush()>",
    "<com.hazelcast.client.proxy.ClientMapProxy$5: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.console.ClientConsoleApp: void handleCommand(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void unlock(java.lang.Object)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxyBase: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCachingProvider: com.hazelcast.client.cache.impl.HazelcastClientCacheManager createHazelcastCacheManager(java.net.URI,java.lang.ClassLoader,java.util.Properties)>",
    "<com.hazelcast.client.spi.impl.AwsAddressTranslator: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>()>",
    "<com.hazelcast.client.proxy.NearCachedClientMapProxy: void addNearCacheInvalidateListener(com.hazelcast.client.spi.EventHandler)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean isNull()>",
    "<com.hazelcast.client.proxy.ClientSetProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.util.concurrent.Callable)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.lang.Object put(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.cache.impl.AbstractClientCacheProxy: java.lang.Object getInternal(java.lang.Object,javax.cache.expiry.ExpiryPolicy,boolean)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.ClientProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$2: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientSemaphoreProxy: void release()>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMultiMapProxy: java.util.Collection remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: void clear()>",
    "<com.hazelcast.client.proxy.ClientMapProxy: void putAllInternal(java.util.Map)>",
    "<com.hazelcast.client.proxy.ClientListProxy: java.util.List subList(int,int)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport$ManagerAuthenticator: void authenticate(com.hazelcast.client.connection.nio.ClientConnection)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object readOne(long)>",
    "<com.hazelcast.client.proxy.ClientAtomicLongProxy: long get()>",
    "<com.hazelcast.client.impl.LifecycleServiceImpl: void <init>(com.hazelcast.client.impl.HazelcastClientInstanceImpl)>",
    "<com.hazelcast.client.proxy.ClientMultiMapProxy: boolean tryLock(java.lang.Object,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)>",
    "<com.hazelcast.client.spi.impl.ClientExecutionServiceImpl: com.hazelcast.core.ICompletableFuture submit(java.lang.Runnable)>",
    "<com.hazelcast.client.proxy.ClientMapProxy$8: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientRingbufferProxy: java.lang.Object invoke(com.hazelcast.client.impl.protocol.ClientMessage,int)>",
    "<com.hazelcast.client.spi.ProxyManager$1: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean containsKeyInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: boolean replaceIfSameInternal(com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data,com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.EntryView getEntryView(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToKeyOwnerInternal(java.util.concurrent.Callable,java.lang.Object,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.ClientLockProxy: int getLockCount()>",
    "<com.hazelcast.client.proxy.txn.TransactionProxy: void begin()>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy: boolean remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnProxy: com.hazelcast.client.impl.protocol.ClientMessage invoke(com.hazelcast.client.impl.protocol.ClientMessage)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.lang.String addEntryListener(com.hazelcast.core.EntryListener,com.hazelcast.query.Predicate,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: java.util.Collection values()>",
    "<com.hazelcast.client.spi.impl.ClientInvocationFuture: com.hazelcast.client.impl.protocol.ClientMessage get()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <init>(java.net.URL)>",
    "<com.hazelcast.client.proxy.ClientQueueProxy: void put(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeAddRequest(boolean)>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: boolean compareAndSet(java.lang.Object,java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy$3: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnListProxy: int size()>",
    "<com.hazelcast.client.proxy.ClientSetProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.connection.nio.ClientConnectionManagerImpl: com.hazelcast.client.connection.nio.ClientConnection createSocketConnection(com.hazelcast.nio.Address)>",
    "<com.hazelcast.client.cache.impl.ClientCacheProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.ClientConditionProxy: void signal()>",
    "<com.hazelcast.client.proxy.PartitionServiceProxy$1: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.xa.XAResourceProxy: void clearRemoteTransactions(javax.transaction.xa.Xid)>",
    "<com.hazelcast.client.cache.impl.AbstractClientInternalCacheProxy$13: com.hazelcast.client.impl.protocol.ClientMessage encodeRemoveRequest(java.lang.String)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: int size()>",
    "<com.hazelcast.client.cache.impl.HazelcastClientCacheManager: com.hazelcast.config.CacheConfig createConfig(java.lang.String,com.hazelcast.config.CacheConfig,boolean,boolean)>",
    "<com.hazelcast.client.spi.impl.ClusterListenerSupport: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientAtomicReferenceProxy: java.lang.Object alterAndGet(com.hazelcast.core.IFunction)>",
    "<com.hazelcast.client.proxy.ClientListProxy: boolean retainAll(java.util.Collection)>",
    "<com.hazelcast.client.proxy.ClientMapReduceProxy$ClientTrackableJob: com.hazelcast.mapreduce.JobProcessInformation getJobProcessInformation()>",
    "<com.hazelcast.client.spi.impl.discovery.DiscoveryAddressProvider: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: boolean containsValue(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Set keySet(com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: java.util.Map executeOnEntries(com.hazelcast.map.EntryProcessor,com.hazelcast.query.Predicate)>",
    "<com.hazelcast.client.proxy.ClientMapProxy: com.hazelcast.core.ICompletableFuture getAsyncInternal(com.hazelcast.nio.serialization.Data)>",
    "<com.hazelcast.client.spi.impl.ClientClusterServiceImpl: void <clinit>()>",
    "<com.hazelcast.client.config.XmlClientConfigBuilder: void <clinit>()>",
    "<com.hazelcast.client.proxy.ClientReplicatedMapProxy: java.lang.Object remove(java.lang.Object)>",
    "<com.hazelcast.client.proxy.ClientExecutorServiceProxy: java.util.concurrent.Future submitToTargetInternal(java.util.concurrent.Callable,com.hazelcast.nio.Address,java.lang.Object,boolean)>",
    "<com.hazelcast.client.proxy.txn.ClientTxnMapProxy: boolean remove(java.lang.Object,java.lang.Object)>"
  ]
}