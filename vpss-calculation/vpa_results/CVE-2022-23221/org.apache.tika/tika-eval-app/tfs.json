{
  "2.2.1": [
    "<org.apache.xmlbeans.impl.tool.XSTCTester: org.apache.xmlbeans.impl.tool.XSTCTester$TestCase[] parseLTGFile(java.io.File,java.util.Collection)>",
    "<org.apache.poi.sl.draw.DrawFontManagerDefault: org.apache.poi.common.usermodel.fonts.FontInfo getFontWithFallback(java.awt.Graphics2D,org.apache.poi.sl.draw.Drawable$DrawableHint,org.apache.poi.common.usermodel.fonts.FontInfo)>",
    "<org.apache.xmlbeans.QNameSetBuilder: void removeAllImpl(java.util.Set,java.util.Set,java.util.Set,java.util.Set)>",
    "<org.apache.xmlbeans.QNameSet: java.lang.String toString()>",
    "<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: int hashCode()>",
    "<org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String readable(javax.xml.namespace.QName,java.util.Map)>",
    "<org.apache.xmlbeans.impl.tool.TypeHierarchyPrinter: void main(java.lang.String[])>",
    "<org.apache.xmlbeans.impl.common.XmlErrorWatcher: java.util.Iterator iterator()>",
    "<org.apache.commons.compress.utils.CountingOutputStream: void write(int)>",
    "<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: int size()>",
    "<org.apache.commons.compress.archivers.sevenz.CLI$Mode$1: java.lang.String getContentMethods(org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)>",
    "<org.apache.tika.eval.app.XMLErrorLogUpdater: void update(java.sql.Connection,org.apache.tika.eval.app.db.TableInfo,java.nio.file.Path)>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl: org.apache.xmlbeans.impl.schema.SchemaContainer getContainer(java.lang.String)>",
    "<org.apache.tika.eval.app.TikaEvalCLI: void handleStartDB(java.lang.String[])>",
    "<org.apache.xmlbeans.impl.store.Cur$CurLoadContext: void xmlns(java.lang.String,java.lang.String)>",
    "<org.apache.poi.util.GenericRecordJsonWriter: boolean printObject(java.lang.String,java.lang.Object)>",
    "<org.apache.commons.collections4.multiset.AbstractMultiSet$AbstractEntry: boolean equals(java.lang.Object)>",
    "<org.apache.poi.ddf.EscherContainerRecord: org.apache.poi.ddf.EscherRecord getChildById(short)>",
    "<org.apache.tika.eval.app.db.JDBCUtil: java.sql.Connection getConnection()>",
    "<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: javax.xml.namespace.QName[] acceptedNames()>",
    "<org.apache.poi.hssf.usermodel.HSSFRichTextString: void applyFont(int,int,short)>",
    "<org.apache.xmlbeans.XmlOptions: boolean hasOption(java.lang.Object)>",
    "<org.apache.poi.ss.format.CellFormat: org.apache.poi.ss.format.CellFormat getInstance(java.util.Locale,java.lang.String)>",
    "<org.apache.poi.hpsf.wellknown.PropertyIDMap: boolean containsKey(java.lang.Object)>",
    "<org.apache.xmlbeans.impl.store.Saver: java.lang.String getNonDefaultUriMapping(java.lang.String)>",
    "<org.apache.xmlbeans.QNameSetBuilder: void removeAllMatchingBoth(java.util.Set,java.util.Set,java.util.Set)>",
    "<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>",
    "<org.apache.poi.ss.formula.DataValidationEvaluator$ValidationEnum$3: boolean isValidValue(org.apache.poi.ss.usermodel.Cell,org.apache.poi.ss.formula.DataValidationEvaluator$DataValidationContext)>",
    "<org.apache.tika.eval.app.AbstractProfiler: void writeTagData(java.lang.String,org.apache.tika.eval.core.util.ContentTags,org.apache.tika.eval.app.db.TableInfo)>",
    "<org.apache.poi.ddf.EscherRecordTypes: org.apache.poi.ddf.EscherRecordTypes forTypeID(int)>",
    "<org.apache.poi.poifs.dev.POIFSViewEngine: java.util.List inspectViewable(java.lang.Object,boolean,int,java.lang.String)>",
    "<org.apache.commons.compress.archivers.dump.TapeInputStream: void close()>",
    "<org.apache.commons.compress.utils.CountingInputStream: int read()>",
    "<org.apache.logging.log4j.message.ParameterFormatter: void appendCollection(java.lang.Object,java.lang.StringBuilder,java.util.Set)>",
    "<org.apache.xmlbeans.QNameSet: boolean isDisjointImpl(org.apache.xmlbeans.QNameSetSpecification,org.apache.xmlbeans.QNameSetSpecification)>",
    "<org.apache.tika.eval.app.TikaEvalCLI: void handleProfileFiles(java.lang.String[])>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl: void assertContainersSynchronized()>",
    "<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$ValuesIterator: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMap,java.lang.Object)>",
    "<org.apache.tika.eval.app.db.JDBCUtil: void <init>(java.lang.String,java.lang.String)>",
    "<org.apache.xmlbeans.QNameSetBuilder: void removeAllMatchingNeither(java.util.Set,java.util.Set,java.util.Set)>",
    "<org.apache.xmlbeans.impl.common.IOUtil: void copyCompletely(java.io.InputStream,java.io.OutputStream)>",
    "<org.apache.commons.compress.utils.CountingInputStream: int read(byte[],int,int)>",
    "<org.apache.xmlbeans.impl.store.Saver: java.lang.String ensureMapping(java.lang.String,java.lang.String,boolean,boolean)>",
    "<org.apache.xmlbeans.impl.values.XmlListImpl: boolean equal_xmlLists(java.util.List,java.util.List)>",
    "<org.apache.poi.ddf.EscherContainerRecord: int serialize(int,byte[],org.apache.poi.ddf.EscherSerializationListener)>",
    "<org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm: org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm getAlgorithmByCode(int)>",
    "<org.apache.tika.eval.app.XMLErrorLogUpdater$ErrorMsgUpdater: void update(java.lang.String,java.lang.String,org.apache.tika.eval.app.AbstractProfiler$PARSE_ERROR_TYPE)>",
    "<org.apache.xmlbeans.impl.tool.XMLBean: void execute()>",
    "<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File[] filesEndingWith(java.lang.String)>",
    "<org.apache.commons.compress.harmony.unpack200.bytecode.CPRef: boolean equals(java.lang.Object)>",
    "<org.apache.commons.collections4.comparators.ComparableComparator: int compare(java.lang.Comparable,java.lang.Comparable)>",
    "<org.apache.xmlbeans.QNameSetBuilder: boolean isDisjointImpl(org.apache.xmlbeans.QNameSetSpecification,org.apache.xmlbeans.QNameSetSpecification)>",
    "<org.apache.poi.util.LocaleID: org.apache.poi.util.LocaleID lookupByLanguageTag(java.lang.String)>",
    "<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$ValuesIterator: java.lang.Object next()>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$XsbReader: void writeIdConstraintData(org.apache.xmlbeans.SchemaIdentityConstraint)>",
    "<org.apache.tika.eval.app.reports.ResultsReporter: void execute(java.sql.Connection,java.nio.file.Path)>",
    "<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.String get(java.lang.String)>",
    "<org.apache.xmlbeans.impl.tool.StreamInstanceValidator: void main(java.lang.String[])>",
    "<org.apache.poi.util.LittleEndianOutputStream: void writeInt(int)>",
    "<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setContentMethods(java.lang.Iterable)>",
    "<org.apache.xmlbeans.impl.store.Saver: void processElement()>",
    "<org.apache.commons.compress.archivers.tar.TarFile: void buildSparseInputStreams()>",
    "<org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm: org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm getAlgorithmByCode(int)>",
    "<org.apache.xmlbeans.impl.tool.InstanceValidator: int extraMain(java.lang.String[])>",
    "<org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[],int,int)>",
    "<org.apache.poi.sl.draw.BitmapImageRenderer: java.awt.image.BufferedImage readImage(java.io.InputStream,java.lang.String)>",
    "<org.apache.poi.hpsf.extractor.HPSFPropertiesExtractor: java.lang.String getDocumentSummaryInformationText()>",
    "<org.apache.tika.eval.app.db.H2Util: boolean databaseExists(java.nio.file.Path)>",
    "<org.apache.commons.collections4.ListUtils: boolean isEqualList(java.util.Collection,java.util.Collection)>",
    "<org.apache.xmlbeans.QNameSetBuilder: void addAllImpl(java.util.Set,java.util.Set,java.util.Set,java.util.Set)>",
    "<org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet forSets(java.util.Set,java.util.Set,java.util.Set,java.util.Set)>",
    "<org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod getMethodByCode(int)>",
    "<org.apache.xmlbeans.impl.tool.StreamInstanceValidator: void validateFiles(java.io.File[],org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.XmlOptions)>",
    "<org.apache.poi.poifs.eventfilesystem.POIFSReaderRegistry: void removeSelectiveListener(org.apache.poi.poifs.eventfilesystem.POIFSReaderListener)>",
    "<org.apache.tika.eval.app.reports.XLSXHREFFormatter: void applyStyleAndValue(int,java.sql.ResultSet,org.apache.poi.ss.usermodel.Cell)>",
    "<org.apache.logging.log4j.util.EnvironmentPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>",
    "<org.apache.commons.collections4.multiset.AbstractMultiSet$AbstractEntry: int hashCode()>",
    "<org.apache.xmlbeans.impl.tool.Diff: void main(java.lang.String[])>",
    "<org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)>",
    "<org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.lang.Iterable)>",
    "<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>",
    "<org.apache.poi.ss.util.CellUtil: void putAll(java.util.Map,java.util.Map)>",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void readOsSpecificProperties(java.nio.file.Path,java.nio.file.LinkOption[])>",
    "<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>",
    "<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean equalSevenZMethods(java.lang.Iterable,java.lang.Iterable)>",
    "<org.apache.xmlbeans.XmlSimpleList: java.lang.String stringValue(java.lang.Object)>",
    "<org.apache.poi.ddf.EscherContainerRecord: java.util.List getChildContainers()>",
    "<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: boolean equals(java.lang.Object)>",
    "<org.apache.xmlbeans.impl.jam.internal.DirectoryScanner: boolean matchPath(java.lang.String,java.lang.String,boolean)>",
    "<org.apache.xmlbeans.impl.tool.CodeGenUtil: boolean externalJar(java.io.File,java.io.File,java.lang.String,boolean,boolean)>",
    "<org.apache.xmlbeans.impl.store.Saver: void addMapping(java.lang.String,java.lang.String)>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl: java.util.Map buildTypeRefsByClassname(java.util.Map)>",
    "<org.apache.xmlbeans.impl.schema.StscState: javax.xml.namespace.QName compatName(javax.xml.namespace.QName,java.lang.String)>",
    "<org.apache.poi.hssf.usermodel.HSSFPatriarch: void preSerialize()>",
    "<org.apache.poi.hssf.usermodel.StaticFontMetrics: java.util.Properties loadMetrics()>",
    "<org.apache.xmlbeans.QNameSet: java.util.Set minSetCopy(java.util.Set)>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl: void saveLoader()>",
    "<org.apache.poi.ddf.EscherPropertyTypes: org.apache.poi.ddf.EscherPropertyTypes forPropertyID(int)>",
    "<org.apache.poi.util.LittleEndianOutputStream: void writeShort(int)>",
    "<org.apache.poi.hpsf.wellknown.PropertyIDMap: java.lang.String get(java.lang.Object)>",
    "<org.apache.tika.eval.app.TikaEvalCLI: void handleProfile(java.lang.String[])>",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int readSparse(byte[],int,int)>",
    "<org.apache.xmlbeans.impl.jam.internal.parser.ParserClassBuilder$MainTool: void parse(org.apache.xmlbeans.impl.jam.internal.parser.ParserClassBuilder,java.io.File)>",
    "<org.apache.xmlbeans.impl.store.Saver: void <init>(org.apache.xmlbeans.impl.store.Cur,org.apache.xmlbeans.XmlOptions)>",
    "<org.apache.xmlbeans.XmlOptions: java.lang.Object get(java.lang.Object)>",
    "<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>",
    "<org.apache.commons.collections4.keyvalue.AbstractMapEntry: int hashCode()>",
    "<org.apache.tika.eval.app.reports.ResultsReporter: void main(java.lang.String[])>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$XsbReader: void writeQNameSet(org.apache.xmlbeans.QNameSet)>",
    "<org.apache.poi.hpsf.PropertySet: byte[] toBytes()>",
    "<org.apache.xmlbeans.impl.tool.XSTCTester: void summarizeResultAsHTMLTableRows(org.apache.xmlbeans.impl.tool.XSTCTester$TestCaseResult,java.io.PrintWriter,boolean)>",
    "<org.apache.commons.collections4.bidimap.TreeBidiMap: int compare(java.lang.Comparable,java.lang.Comparable)>",
    "<org.apache.xmlbeans.impl.store.Locale: void applyNamespaces(org.apache.xmlbeans.impl.store.Cur,java.util.Map)>",
    "<org.apache.poi.util.GenericRecordXmlWriter: boolean writeProperties(org.apache.poi.common.usermodel.GenericRecord)>",
    "<org.apache.commons.compress.archivers.sevenz.SevenZFile$1: int read(byte[],int,int)>",
    "<org.apache.commons.collections4.keyvalue.AbstractMapEntry: boolean equals(java.lang.Object)>",
    "<org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String suggestPrefix(java.lang.String)>",
    "<org.apache.xmlbeans.impl.inst2xsd.Inst2Xsd: boolean validateInstances(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument[],org.apache.xmlbeans.XmlObject[])>",
    "<org.apache.poi.poifs.nio.CleanerUtil: void <clinit>()>",
    "<org.apache.commons.compress.harmony.pack200.ClassBands: void finaliseBands()>",
    "<org.apache.poi.hssf.model.InternalWorkbook: org.apache.poi.hssf.model.DrawingManager2 findDrawingManager(org.apache.poi.hssf.record.DrawingGroupRecord,java.util.List)>",
    "<org.apache.poi.util.GenericRecordXmlWriter: boolean printObject(java.lang.String,java.lang.Object)>",
    "<org.apache.tika.eval.app.XMLErrorLogUpdater$ErrorMsgUpdater: int getContainerId(java.lang.String)>",
    "<org.apache.xmlbeans.impl.store.Cur$CurLoadContext: javax.xml.namespace.QName checkName(javax.xml.namespace.QName,boolean)>",
    "<org.apache.poi.hssf.usermodel.HSSFExtendedColor: byte[] getIndexedRGB()>",
    "<org.apache.tika.eval.app.TikaEvalCLI: void handleCompare(java.lang.String[])>",
    "<org.apache.xmlbeans.impl.repackage.Repackage: void repackageJavaFile(java.lang.String)>",
    "<org.apache.commons.compress.compressors.FileNameUtil: java.lang.String getUncompressedFilename(java.lang.String)>",
    "<org.apache.commons.collections4.ListUtils: int hashCodeForList(java.util.Collection)>",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void buildSparseInputStreams()>",
    "<org.apache.tika.eval.app.reports.Report: void dumpXLSX(java.sql.Connection,java.nio.file.Path)>",
    "<org.apache.commons.collections4.iterators.CollatingIterator: boolean set(int)>",
    "<org.apache.commons.collections4.iterators.CollatingIterator: boolean anyHasNext(java.util.List)>",
    "<org.apache.tika.eval.app.reports.ResultsReporter: java.nio.file.Path getDefaultReportsConfig(java.sql.Connection)>",
    "<org.apache.commons.collections4.keyvalue.MultiKey: void calculateHashCode(java.lang.Object[])>",
    "<org.apache.tika.eval.app.reports.Report: void writeCell(java.sql.ResultSetMetaData,int,java.sql.ResultSet,org.apache.poi.ss.usermodel.Cell)>",
    "<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>",
    "<org.apache.tika.eval.app.AbstractProfiler: org.apache.tika.eval.core.util.ContentTags parseContentAndTags(org.apache.tika.eval.app.EvalFilePaths,org.apache.tika.metadata.Metadata)>",
    "<org.apache.logging.log4j.simple.SimpleLogger: void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)>",
    "<org.apache.commons.compress.archivers.sevenz.SevenZFile$1: int read()>",
    "<org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>",
    "<org.apache.logging.log4j.util.LowLevelLogUtil: void logException(java.lang.Throwable)>",
    "<org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.util.Iterator)>",
    "<org.apache.xmlbeans.impl.tool.XMLBeanXSTCHarness: void runTestCase(org.apache.xmlbeans.impl.tool.XSTCTester$TestCaseResult)>",
    "<org.apache.xmlbeans.XmlSimpleList: int hashCode()>",
    "<org.apache.poi.poifs.filesystem.FilteringDirectoryNode: void <init>(org.apache.poi.poifs.filesystem.DirectoryEntry,java.util.Collection)>",
    "<org.apache.commons.compress.archivers.zip.ZipEncodingHelper: boolean isUTF8(java.lang.String)>",
    "<org.apache.poi.ddf.EscherContainerRecord: void display(java.io.PrintWriter,int)>",
    "<org.apache.xmlbeans.impl.tool.CodeGenUtil: boolean externalCompile(java.util.List,java.io.File,java.io.File[],boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl: void addContainer(java.lang.String)>",
    "<org.apache.poi.hpsf.Variant: int getVariantLength(long)>",
    "<org.apache.commons.compress.utils.IOUtils: long copyRange(java.io.InputStream,long,java.io.OutputStream,int)>",
    "<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>",
    "<org.apache.poi.sl.draw.geom.PresetGeometries: org.apache.poi.sl.draw.geom.PresetGeometries getInstance()>",
    "<org.apache.xmlbeans.impl.store.Saver: java.lang.String getNamespaceForPrefix(java.lang.String)>",
    "<org.apache.poi.hpsf.PropertySet: void <init>(org.apache.poi.hpsf.PropertySet)>",
    "<org.apache.xmlbeans.QNameSetBuilder: void removeAllMatchingFirstOnly(java.util.Set,java.util.Set,java.util.Set)>",
    "<org.apache.poi.hpsf.Variant: java.lang.String getVariantName(long)>",
    "<org.apache.tika.eval.app.tools.LeipzigSampler: void execute(java.nio.file.Path,int,java.io.BufferedWriter)>",
    "<org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>",
    "<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: boolean contains(java.lang.Object)>",
    "<org.apache.poi.util.GenericRecordJsonWriter: boolean writeProperties(org.apache.poi.common.usermodel.GenericRecord)>",
    "<org.apache.poi.ddf.EscherContainerRecord: int getRecordSize()>",
    "<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeFolder(java.io.DataOutput,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)>",
    "<org.apache.tika.eval.app.reports.XLSXNumFormatter: void applyStyleAndValue(int,java.sql.ResultSet,org.apache.poi.ss.usermodel.Cell)>",
    "<org.apache.xmlbeans.impl.values.XmlListImpl: void set_list(java.util.List)>",
    "<org.apache.poi.util.LittleEndianOutputStream: void writeUInt(long)>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl: void fixupContainers()>",
    "<org.apache.tika.eval.app.XMLErrorLogUpdater: void main(java.lang.String[])>",
    "<org.apache.commons.compress.compressors.FileNameUtil: boolean isCompressedFilename(java.lang.String)>",
    "<org.apache.poi.hssf.usermodel.HSSFShapeFactory: void createShapeTree(org.apache.poi.ddf.EscherContainerRecord,org.apache.poi.hssf.record.EscherAggregate,org.apache.poi.hssf.usermodel.HSSFShapeContainer,org.apache.poi.poifs.filesystem.DirectoryNode)>",
    "<org.apache.tika.eval.app.reports.Report: void dumpReportToWorkbook(java.sql.Statement,org.apache.poi.xssf.streaming.SXSSFWorkbook)>",
    "<org.apache.poi.poifs.filesystem.POIFSFileSystem: void closeInputStream(java.io.InputStream,boolean)>",
    "<org.apache.xmlbeans.impl.common.XmlErrorWatcher: int size()>",
    "<org.apache.poi.poifs.eventfilesystem.POIFSReaderRegistry: void dropDocument(org.apache.poi.poifs.eventfilesystem.POIFSReaderListener,org.apache.poi.poifs.filesystem.DocumentDescriptor)>",
    "<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$KeysMultiSet$MapEntryTransformer$1: int getCount()>",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void close()>",
    "<org.apache.poi.hssf.usermodel.HSSFSheet: org.apache.poi.hssf.usermodel.HSSFComment lookForComment(org.apache.poi.hssf.usermodel.HSSFShapeContainer,int,int)>",
    "<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$ValuesIterator: boolean hasNext()>",
    "<org.apache.poi.util.LocaleID: org.apache.poi.util.LocaleID lookupByLcid(int)>",
    "<org.apache.commons.compress.utils.CountingOutputStream: void write(byte[],int,int)>",
    "<org.apache.tika.eval.app.tools.CommonTokenOverlapCounter: void compare(java.lang.String,java.lang.String,org.apache.tika.eval.core.tokens.CommonTokenCountManager)>",
    "<org.apache.logging.log4j.spi.DefaultThreadContextMap: boolean containsKey(java.lang.String)>"
  ],
  "2.2.0": [
    "<org.apache.xmlbeans.impl.tool.XSTCTester: org.apache.xmlbeans.impl.tool.XSTCTester$TestCase[] parseLTGFile(java.io.File,java.util.Collection)>",
    "<org.apache.poi.sl.draw.DrawFontManagerDefault: org.apache.poi.common.usermodel.fonts.FontInfo getFontWithFallback(java.awt.Graphics2D,org.apache.poi.sl.draw.Drawable$DrawableHint,org.apache.poi.common.usermodel.fonts.FontInfo)>",
    "<org.apache.xmlbeans.QNameSetBuilder: void removeAllImpl(java.util.Set,java.util.Set,java.util.Set,java.util.Set)>",
    "<org.apache.xmlbeans.QNameSet: java.lang.String toString()>",
    "<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: int hashCode()>",
    "<org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String readable(javax.xml.namespace.QName,java.util.Map)>",
    "<org.apache.xmlbeans.impl.tool.TypeHierarchyPrinter: void main(java.lang.String[])>",
    "<org.apache.xmlbeans.impl.common.XmlErrorWatcher: java.util.Iterator iterator()>",
    "<org.apache.commons.compress.utils.CountingOutputStream: void write(int)>",
    "<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: int size()>",
    "<org.apache.commons.compress.archivers.sevenz.CLI$Mode$1: java.lang.String getContentMethods(org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)>",
    "<org.apache.tika.eval.app.XMLErrorLogUpdater: void update(java.sql.Connection,org.apache.tika.eval.app.db.TableInfo,java.nio.file.Path)>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl: org.apache.xmlbeans.impl.schema.SchemaContainer getContainer(java.lang.String)>",
    "<org.apache.tika.eval.app.TikaEvalCLI: void handleStartDB(java.lang.String[])>",
    "<org.apache.xmlbeans.impl.store.Cur$CurLoadContext: void xmlns(java.lang.String,java.lang.String)>",
    "<org.apache.poi.util.GenericRecordJsonWriter: boolean printObject(java.lang.String,java.lang.Object)>",
    "<org.apache.commons.collections4.multiset.AbstractMultiSet$AbstractEntry: boolean equals(java.lang.Object)>",
    "<org.apache.poi.ddf.EscherContainerRecord: org.apache.poi.ddf.EscherRecord getChildById(short)>",
    "<org.apache.tika.eval.app.db.JDBCUtil: java.sql.Connection getConnection()>",
    "<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: javax.xml.namespace.QName[] acceptedNames()>",
    "<org.apache.poi.hssf.usermodel.HSSFRichTextString: void applyFont(int,int,short)>",
    "<org.apache.xmlbeans.XmlOptions: boolean hasOption(java.lang.Object)>",
    "<org.apache.poi.ss.format.CellFormat: org.apache.poi.ss.format.CellFormat getInstance(java.util.Locale,java.lang.String)>",
    "<org.apache.poi.hpsf.wellknown.PropertyIDMap: boolean containsKey(java.lang.Object)>",
    "<org.apache.xmlbeans.impl.store.Saver: java.lang.String getNonDefaultUriMapping(java.lang.String)>",
    "<org.apache.xmlbeans.QNameSetBuilder: void removeAllMatchingBoth(java.util.Set,java.util.Set,java.util.Set)>",
    "<org.apache.poi.ss.formula.function.FunctionMetadataReader: void readResourceFile(org.apache.poi.ss.formula.function.FunctionDataBuilder,java.lang.String)>",
    "<org.apache.poi.ss.formula.DataValidationEvaluator$ValidationEnum$3: boolean isValidValue(org.apache.poi.ss.usermodel.Cell,org.apache.poi.ss.formula.DataValidationEvaluator$DataValidationContext)>",
    "<org.apache.tika.eval.app.AbstractProfiler: void writeTagData(java.lang.String,org.apache.tika.eval.core.util.ContentTags,org.apache.tika.eval.app.db.TableInfo)>",
    "<org.apache.poi.ddf.EscherRecordTypes: org.apache.poi.ddf.EscherRecordTypes forTypeID(int)>",
    "<org.apache.poi.poifs.dev.POIFSViewEngine: java.util.List inspectViewable(java.lang.Object,boolean,int,java.lang.String)>",
    "<org.apache.commons.compress.archivers.dump.TapeInputStream: void close()>",
    "<org.apache.commons.compress.utils.CountingInputStream: int read()>",
    "<org.apache.logging.log4j.message.ParameterFormatter: void appendCollection(java.lang.Object,java.lang.StringBuilder,java.util.Set)>",
    "<org.apache.xmlbeans.QNameSet: boolean isDisjointImpl(org.apache.xmlbeans.QNameSetSpecification,org.apache.xmlbeans.QNameSetSpecification)>",
    "<org.apache.tika.eval.app.TikaEvalCLI: void handleProfileFiles(java.lang.String[])>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl: void assertContainersSynchronized()>",
    "<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$ValuesIterator: void <init>(org.apache.commons.collections4.multimap.AbstractMultiValuedMap,java.lang.Object)>",
    "<org.apache.tika.eval.app.db.JDBCUtil: void <init>(java.lang.String,java.lang.String)>",
    "<org.apache.xmlbeans.QNameSetBuilder: void removeAllMatchingNeither(java.util.Set,java.util.Set,java.util.Set)>",
    "<org.apache.xmlbeans.impl.common.IOUtil: void copyCompletely(java.io.InputStream,java.io.OutputStream)>",
    "<org.apache.commons.compress.utils.CountingInputStream: int read(byte[],int,int)>",
    "<org.apache.xmlbeans.impl.store.Saver: java.lang.String ensureMapping(java.lang.String,java.lang.String,boolean,boolean)>",
    "<org.apache.xmlbeans.impl.values.XmlListImpl: boolean equal_xmlLists(java.util.List,java.util.List)>",
    "<org.apache.poi.ddf.EscherContainerRecord: int serialize(int,byte[],org.apache.poi.ddf.EscherSerializationListener)>",
    "<org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm: org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm getAlgorithmByCode(int)>",
    "<org.apache.tika.eval.app.XMLErrorLogUpdater$ErrorMsgUpdater: void update(java.lang.String,java.lang.String,org.apache.tika.eval.app.AbstractProfiler$PARSE_ERROR_TYPE)>",
    "<org.apache.xmlbeans.impl.tool.XMLBean: void execute()>",
    "<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File[] filesEndingWith(java.lang.String)>",
    "<org.apache.commons.compress.harmony.unpack200.bytecode.CPRef: boolean equals(java.lang.Object)>",
    "<org.apache.commons.collections4.comparators.ComparableComparator: int compare(java.lang.Comparable,java.lang.Comparable)>",
    "<org.apache.xmlbeans.QNameSetBuilder: boolean isDisjointImpl(org.apache.xmlbeans.QNameSetSpecification,org.apache.xmlbeans.QNameSetSpecification)>",
    "<org.apache.poi.util.LocaleID: org.apache.poi.util.LocaleID lookupByLanguageTag(java.lang.String)>",
    "<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$ValuesIterator: java.lang.Object next()>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$XsbReader: void writeIdConstraintData(org.apache.xmlbeans.SchemaIdentityConstraint)>",
    "<org.apache.tika.eval.app.reports.ResultsReporter: void execute(java.sql.Connection,java.nio.file.Path)>",
    "<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.String get(java.lang.String)>",
    "<org.apache.xmlbeans.impl.tool.StreamInstanceValidator: void main(java.lang.String[])>",
    "<org.apache.poi.util.LittleEndianOutputStream: void writeInt(int)>",
    "<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: void setContentMethods(java.lang.Iterable)>",
    "<org.apache.xmlbeans.impl.store.Saver: void processElement()>",
    "<org.apache.commons.compress.archivers.tar.TarFile: void buildSparseInputStreams()>",
    "<org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm: org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm getAlgorithmByCode(int)>",
    "<org.apache.xmlbeans.impl.tool.InstanceValidator: int extraMain(java.lang.String[])>",
    "<org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[],int,int)>",
    "<org.apache.poi.sl.draw.BitmapImageRenderer: java.awt.image.BufferedImage readImage(java.io.InputStream,java.lang.String)>",
    "<org.apache.poi.hpsf.extractor.HPSFPropertiesExtractor: java.lang.String getDocumentSummaryInformationText()>",
    "<org.apache.tika.eval.app.db.H2Util: boolean databaseExists(java.nio.file.Path)>",
    "<org.apache.commons.collections4.ListUtils: boolean isEqualList(java.util.Collection,java.util.Collection)>",
    "<org.apache.xmlbeans.QNameSetBuilder: void addAllImpl(java.util.Set,java.util.Set,java.util.Set,java.util.Set)>",
    "<org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet forSets(java.util.Set,java.util.Set,java.util.Set,java.util.Set)>",
    "<org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod getMethodByCode(int)>",
    "<org.apache.xmlbeans.impl.tool.StreamInstanceValidator: void validateFiles(java.io.File[],org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.XmlOptions)>",
    "<org.apache.poi.poifs.eventfilesystem.POIFSReaderRegistry: void removeSelectiveListener(org.apache.poi.poifs.eventfilesystem.POIFSReaderListener)>",
    "<org.apache.tika.eval.app.reports.XLSXHREFFormatter: void applyStyleAndValue(int,java.sql.ResultSet,org.apache.poi.ss.usermodel.Cell)>",
    "<org.apache.logging.log4j.util.EnvironmentPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>",
    "<org.apache.commons.collections4.multiset.AbstractMultiSet$AbstractEntry: int hashCode()>",
    "<org.apache.xmlbeans.impl.tool.Diff: void main(java.lang.String[])>",
    "<org.apache.commons.collections4.CollectionUtils: java.util.List collate(java.lang.Iterable,java.lang.Iterable,java.util.Comparator,boolean)>",
    "<org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.lang.Iterable)>",
    "<org.apache.logging.log4j.util.PropertiesPropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>",
    "<org.apache.poi.ss.util.CellUtil: void putAll(java.util.Map,java.util.Map)>",
    "<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void readOsSpecificProperties(java.nio.file.Path,java.nio.file.LinkOption[])>",
    "<org.apache.commons.collections4.iterators.ZippingIterator: boolean hasNext()>",
    "<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean equalSevenZMethods(java.lang.Iterable,java.lang.Iterable)>",
    "<org.apache.xmlbeans.XmlSimpleList: java.lang.String stringValue(java.lang.Object)>",
    "<org.apache.poi.ddf.EscherContainerRecord: java.util.List getChildContainers()>",
    "<org.apache.commons.collections4.map.AbstractHashedMap$HashEntry: boolean equals(java.lang.Object)>",
    "<org.apache.xmlbeans.impl.jam.internal.DirectoryScanner: boolean matchPath(java.lang.String,java.lang.String,boolean)>",
    "<org.apache.xmlbeans.impl.tool.CodeGenUtil: boolean externalJar(java.io.File,java.io.File,java.lang.String,boolean,boolean)>",
    "<org.apache.xmlbeans.impl.store.Saver: void addMapping(java.lang.String,java.lang.String)>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl: java.util.Map buildTypeRefsByClassname(java.util.Map)>",
    "<org.apache.xmlbeans.impl.schema.StscState: javax.xml.namespace.QName compatName(javax.xml.namespace.QName,java.lang.String)>",
    "<org.apache.poi.hssf.usermodel.HSSFPatriarch: void preSerialize()>",
    "<org.apache.poi.hssf.usermodel.StaticFontMetrics: java.util.Properties loadMetrics()>",
    "<org.apache.xmlbeans.QNameSet: java.util.Set minSetCopy(java.util.Set)>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl: void saveLoader()>",
    "<org.apache.poi.ddf.EscherPropertyTypes: org.apache.poi.ddf.EscherPropertyTypes forPropertyID(int)>",
    "<org.apache.poi.util.LittleEndianOutputStream: void writeShort(int)>",
    "<org.apache.poi.hpsf.wellknown.PropertyIDMap: java.lang.String get(java.lang.Object)>",
    "<org.apache.tika.eval.app.TikaEvalCLI: void handleProfile(java.lang.String[])>",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: int readSparse(byte[],int,int)>",
    "<org.apache.xmlbeans.impl.jam.internal.parser.ParserClassBuilder$MainTool: void parse(org.apache.xmlbeans.impl.jam.internal.parser.ParserClassBuilder,java.io.File)>",
    "<org.apache.xmlbeans.impl.store.Saver: void <init>(org.apache.xmlbeans.impl.store.Cur,org.apache.xmlbeans.XmlOptions)>",
    "<org.apache.xmlbeans.XmlOptions: java.lang.Object get(java.lang.Object)>",
    "<org.apache.commons.collections4.iterators.ZippingIterator: java.lang.Object next()>",
    "<org.apache.commons.collections4.keyvalue.AbstractMapEntry: int hashCode()>",
    "<org.apache.tika.eval.app.reports.ResultsReporter: void main(java.lang.String[])>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$XsbReader: void writeQNameSet(org.apache.xmlbeans.QNameSet)>",
    "<org.apache.poi.hpsf.PropertySet: byte[] toBytes()>",
    "<org.apache.xmlbeans.impl.tool.XSTCTester: void summarizeResultAsHTMLTableRows(org.apache.xmlbeans.impl.tool.XSTCTester$TestCaseResult,java.io.PrintWriter,boolean)>",
    "<org.apache.commons.collections4.bidimap.TreeBidiMap: int compare(java.lang.Comparable,java.lang.Comparable)>",
    "<org.apache.xmlbeans.impl.store.Locale: void applyNamespaces(org.apache.xmlbeans.impl.store.Cur,java.util.Map)>",
    "<org.apache.poi.util.GenericRecordXmlWriter: boolean writeProperties(org.apache.poi.common.usermodel.GenericRecord)>",
    "<org.apache.commons.compress.archivers.sevenz.SevenZFile$1: int read(byte[],int,int)>",
    "<org.apache.commons.collections4.keyvalue.AbstractMapEntry: boolean equals(java.lang.Object)>",
    "<org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String suggestPrefix(java.lang.String)>",
    "<org.apache.xmlbeans.impl.inst2xsd.Inst2Xsd: boolean validateInstances(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument[],org.apache.xmlbeans.XmlObject[])>",
    "<org.apache.poi.poifs.nio.CleanerUtil: void <clinit>()>",
    "<org.apache.commons.compress.harmony.pack200.ClassBands: void finaliseBands()>",
    "<org.apache.poi.hssf.model.InternalWorkbook: org.apache.poi.hssf.model.DrawingManager2 findDrawingManager(org.apache.poi.hssf.record.DrawingGroupRecord,java.util.List)>",
    "<org.apache.poi.util.GenericRecordXmlWriter: boolean printObject(java.lang.String,java.lang.Object)>",
    "<org.apache.tika.eval.app.XMLErrorLogUpdater$ErrorMsgUpdater: int getContainerId(java.lang.String)>",
    "<org.apache.xmlbeans.impl.store.Cur$CurLoadContext: javax.xml.namespace.QName checkName(javax.xml.namespace.QName,boolean)>",
    "<org.apache.poi.hssf.usermodel.HSSFExtendedColor: byte[] getIndexedRGB()>",
    "<org.apache.tika.eval.app.TikaEvalCLI: void handleCompare(java.lang.String[])>",
    "<org.apache.xmlbeans.impl.repackage.Repackage: void repackageJavaFile(java.lang.String)>",
    "<org.apache.commons.compress.compressors.FileNameUtil: java.lang.String getUncompressedFilename(java.lang.String)>",
    "<org.apache.commons.collections4.ListUtils: int hashCodeForList(java.util.Collection)>",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void buildSparseInputStreams()>",
    "<org.apache.tika.eval.app.reports.Report: void dumpXLSX(java.sql.Connection,java.nio.file.Path)>",
    "<org.apache.commons.collections4.iterators.CollatingIterator: boolean set(int)>",
    "<org.apache.commons.collections4.iterators.CollatingIterator: boolean anyHasNext(java.util.List)>",
    "<org.apache.tika.eval.app.reports.ResultsReporter: java.nio.file.Path getDefaultReportsConfig(java.sql.Connection)>",
    "<org.apache.commons.collections4.keyvalue.MultiKey: void calculateHashCode(java.lang.Object[])>",
    "<org.apache.tika.eval.app.reports.Report: void writeCell(java.sql.ResultSetMetaData,int,java.sql.ResultSet,org.apache.poi.ss.usermodel.Cell)>",
    "<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>",
    "<org.apache.tika.eval.app.AbstractProfiler: org.apache.tika.eval.core.util.ContentTags parseContentAndTags(org.apache.tika.eval.app.EvalFilePaths,org.apache.tika.metadata.Metadata)>",
    "<org.apache.logging.log4j.simple.SimpleLogger: void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)>",
    "<org.apache.commons.compress.archivers.sevenz.SevenZFile$1: int read()>",
    "<org.apache.commons.collections4.CollectionUtils: java.util.Map getCardinalityMap(java.lang.Iterable)>",
    "<org.apache.logging.log4j.util.LowLevelLogUtil: void logException(java.lang.Throwable)>",
    "<org.apache.commons.collections4.CollectionUtils: boolean addAll(java.util.Collection,java.util.Iterator)>",
    "<org.apache.xmlbeans.impl.tool.XMLBeanXSTCHarness: void runTestCase(org.apache.xmlbeans.impl.tool.XSTCTester$TestCaseResult)>",
    "<org.apache.xmlbeans.XmlSimpleList: int hashCode()>",
    "<org.apache.poi.poifs.filesystem.FilteringDirectoryNode: void <init>(org.apache.poi.poifs.filesystem.DirectoryEntry,java.util.Collection)>",
    "<org.apache.commons.compress.archivers.zip.ZipEncodingHelper: boolean isUTF8(java.lang.String)>",
    "<org.apache.poi.ddf.EscherContainerRecord: void display(java.io.PrintWriter,int)>",
    "<org.apache.xmlbeans.impl.tool.CodeGenUtil: boolean externalCompile(java.util.List,java.io.File,java.io.File[],boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl: void addContainer(java.lang.String)>",
    "<org.apache.poi.hpsf.Variant: int getVariantLength(long)>",
    "<org.apache.commons.compress.utils.IOUtils: long copyRange(java.io.InputStream,long,java.io.OutputStream,int)>",
    "<org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>",
    "<org.apache.poi.sl.draw.geom.PresetGeometries: org.apache.poi.sl.draw.geom.PresetGeometries getInstance()>",
    "<org.apache.xmlbeans.impl.store.Saver: java.lang.String getNamespaceForPrefix(java.lang.String)>",
    "<org.apache.poi.hpsf.PropertySet: void <init>(org.apache.poi.hpsf.PropertySet)>",
    "<org.apache.xmlbeans.QNameSetBuilder: void removeAllMatchingFirstOnly(java.util.Set,java.util.Set,java.util.Set)>",
    "<org.apache.poi.hpsf.Variant: java.lang.String getVariantName(long)>",
    "<org.apache.tika.eval.app.tools.LeipzigSampler: void execute(java.nio.file.Path,int,java.io.BufferedWriter)>",
    "<org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>",
    "<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$WrappedCollection: boolean contains(java.lang.Object)>",
    "<org.apache.poi.util.GenericRecordJsonWriter: boolean writeProperties(org.apache.poi.common.usermodel.GenericRecord)>",
    "<org.apache.poi.ddf.EscherContainerRecord: int getRecordSize()>",
    "<org.apache.commons.compress.archivers.sevenz.SevenZOutputFile: void writeFolder(java.io.DataOutput,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry)>",
    "<org.apache.tika.eval.app.reports.XLSXNumFormatter: void applyStyleAndValue(int,java.sql.ResultSet,org.apache.poi.ss.usermodel.Cell)>",
    "<org.apache.xmlbeans.impl.values.XmlListImpl: void set_list(java.util.List)>",
    "<org.apache.poi.util.LittleEndianOutputStream: void writeUInt(long)>",
    "<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl: void fixupContainers()>",
    "<org.apache.tika.eval.app.XMLErrorLogUpdater: void main(java.lang.String[])>",
    "<org.apache.commons.compress.compressors.FileNameUtil: boolean isCompressedFilename(java.lang.String)>",
    "<org.apache.poi.hssf.usermodel.HSSFShapeFactory: void createShapeTree(org.apache.poi.ddf.EscherContainerRecord,org.apache.poi.hssf.record.EscherAggregate,org.apache.poi.hssf.usermodel.HSSFShapeContainer,org.apache.poi.poifs.filesystem.DirectoryNode)>",
    "<org.apache.tika.eval.app.reports.Report: void dumpReportToWorkbook(java.sql.Statement,org.apache.poi.xssf.streaming.SXSSFWorkbook)>",
    "<org.apache.poi.poifs.filesystem.POIFSFileSystem: void closeInputStream(java.io.InputStream,boolean)>",
    "<org.apache.xmlbeans.impl.common.XmlErrorWatcher: int size()>",
    "<org.apache.poi.poifs.eventfilesystem.POIFSReaderRegistry: void dropDocument(org.apache.poi.poifs.eventfilesystem.POIFSReaderListener,org.apache.poi.poifs.filesystem.DocumentDescriptor)>",
    "<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$KeysMultiSet$MapEntryTransformer$1: int getCount()>",
    "<org.apache.commons.compress.archivers.tar.TarArchiveInputStream: void close()>",
    "<org.apache.poi.hssf.usermodel.HSSFSheet: org.apache.poi.hssf.usermodel.HSSFComment lookForComment(org.apache.poi.hssf.usermodel.HSSFShapeContainer,int,int)>",
    "<org.apache.commons.collections4.multimap.AbstractMultiValuedMap$ValuesIterator: boolean hasNext()>",
    "<org.apache.poi.util.LocaleID: org.apache.poi.util.LocaleID lookupByLcid(int)>",
    "<org.apache.commons.compress.utils.CountingOutputStream: void write(byte[],int,int)>",
    "<org.apache.tika.eval.app.tools.CommonTokenOverlapCounter: void compare(java.lang.String,java.lang.String,org.apache.tika.eval.core.tokens.CommonTokenCountManager)>",
    "<org.apache.logging.log4j.spi.DefaultThreadContextMap: boolean containsKey(java.lang.String)>"
  ]
}