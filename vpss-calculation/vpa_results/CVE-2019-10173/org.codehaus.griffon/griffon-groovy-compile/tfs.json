{
  "2.16.0": [
    "<org.codehaus.griffon.compile.core.ast.transform.AbstractASTTransformation: void addDelegateMethods(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.ArgumentListExpression args(java.util.List)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.ConstantExpression constx(java.lang.Object)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.stmt.Statement ifs(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.MapChangeListenerASTTransformation: void addMapChangeListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.ClosureExpression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.transform.ListChangeListenerASTTransformation: void addListenerToProperty(org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.ast.AnnotationNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.FieldNode)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.MapExpression mapx(org.codehaus.groovy.ast.expr.MapEntryExpression[])>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: void injectProperty(org.codehaus.groovy.ast.ClassNode,java.lang.String,java.lang.Class)>",
    "<org.codehaus.griffon.compile.core.ast.transform.PropertyListenerASTTransformation: void addPropertyChangeListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.ConstantExpression)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.BinaryExpression assign(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.GriffonMvcArtifactASTInjector: void inject(org.codehaus.groovy.ast.ClassNode,java.lang.String)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.BinaryExpression iof(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.ClassNode)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.MethodCallExpression call(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.VariableExpression var(java.lang.String)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: void injectProperty(org.codehaus.groovy.ast.ClassNode,java.lang.String,int,java.lang.Class,java.lang.Object)>",
    "<org.codehaus.griffon.compile.core.ast.transform.FXObservableASTTransformation: org.codehaus.groovy.ast.stmt.Statement createSetterStatement(org.codehaus.groovy.ast.PropertyNode)>",
    "<org.codehaus.griffon.compile.core.ast.transform.AbstractASTInjector: org.codehaus.groovy.ast.expr.Expression applicationExpression(org.codehaus.groovy.ast.ClassNode)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.BinaryExpression 'cmp'(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.Expression prop(org.codehaus.groovy.ast.expr.Expression,java.lang.String)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.ConstructorCallExpression ctor(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.ClassExpression classx(org.codehaus.groovy.ast.ClassNode)>",
    "<org.codehaus.griffon.compile.core.ast.transform.ListChangeListenerASTTransformation: void addListChangeListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.VariableExpression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.transform.AbstractASTTransformation: org.codehaus.groovy.ast.expr.Expression emptyMap()>",
    "<org.codehaus.griffon.compile.core.ast.transform.ChangeListenerASTTransformation: void addListenerToProperty(org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.ast.AnnotationNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.FieldNode)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.NotExpression not(org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.InvalidationListenerASTTransformation: void addListenerToProperty(org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.ast.AnnotationNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.FieldNode)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: void injectConstant(org.codehaus.groovy.ast.ClassNode,java.lang.String,java.lang.Class,java.lang.Object)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.FieldNode injectField(org.codehaus.groovy.ast.ClassNode,java.lang.String,int,org.codehaus.groovy.ast.ClassNode,java.lang.Object,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.ArgumentListExpression vars(java.lang.String[])>",
    "<org.codehaus.griffon.compile.core.ast.transform.MapChangeListenerASTTransformation: void addMapChangeListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.VariableExpression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.transform.AbstractASTTransformation: org.codehaus.groovy.ast.expr.FieldExpression injectedField(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,java.lang.String,java.lang.String)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.stmt.Statement ifs_no_return(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement)>",
    "<org.codehaus.griffon.compile.core.ast.transform.FXObservableASTTransformation: void createGetterMethod(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.PropertyNode,java.lang.String,org.codehaus.groovy.ast.stmt.Statement,java.util.List)>",
    "<org.codehaus.griffon.compile.core.ast.transform.InvalidationListenerASTTransformation: void addInvalidationListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.VariableExpression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.transform.PropertyListenerASTTransformation: void addPropertyChangeListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.VariableExpression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.FXObservableASTTransformation: org.codehaus.groovy.ast.FieldNode createFieldNodeCopy(java.lang.String,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.FieldNode)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.stmt.Statement ifs_no_return(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.VetoableASTTransformation: void createSetterMethod(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.PropertyNode,java.lang.String,org.codehaus.groovy.ast.stmt.Statement)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.VariableExpression var(java.lang.String,org.codehaus.groovy.ast.ClassNode)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.Parameter param(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.InvalidationListenerASTTransformation: void addInvalidationListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.ConstantExpression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.transform.ThreadingASTTransformation: org.codehaus.groovy.ast.stmt.Statement wrapStatements(org.codehaus.groovy.ast.stmt.Statement,java.lang.String)>",
    "<org.codehaus.griffon.compile.core.ast.transform.ObservableASTTransformation: void wrapSetterMethod(org.codehaus.groovy.ast.ClassNode,java.lang.String)>",
    "<org.codehaus.griffon.compile.core.ast.transform.FXObservableASTTransformation: org.codehaus.groovy.ast.stmt.Statement createGetterStatement(org.codehaus.groovy.ast.PropertyNode)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.Expression prop(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.ChangeListenerASTTransformation: org.codehaus.groovy.ast.expr.ArgumentListExpression createListenerExpression(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.transform.PropertyListenerASTTransformation: void addListenerToClass(org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.ast.AnnotationNode,org.codehaus.groovy.ast.ClassNode)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.FieldExpression field(org.codehaus.groovy.ast.ClassNode,java.lang.String)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.MapEntryExpression mapEntryx(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.ObservableASTTransformation: void apply(org.codehaus.groovy.ast.ClassNode)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: void addReadOnlyProperty(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.ClassNode,java.lang.Object)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.BinaryExpression and(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.GriffonControllerASTInjector: void inject(org.codehaus.groovy.ast.ClassNode,java.lang.String)>",
    "<org.codehaus.griffon.compile.core.ast.transform.ListChangeListenerASTTransformation: void addListChangeListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.ConstantExpression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.transform.ChangeListenerASTTransformation: void addChangeListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.ConstantExpression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.BinaryExpression or(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: void injectProperty(org.codehaus.groovy.ast.ClassNode,java.lang.String,int,org.codehaus.groovy.ast.ClassNode,java.lang.Object)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.ArgumentListExpression args(org.codehaus.groovy.ast.expr.Expression[])>",
    "<org.codehaus.griffon.compile.core.ast.transform.ObservableASTTransformation: void createListenerSetter(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.PropertyNode)>",
    "<org.codehaus.griffon.compile.core.ast.transform.AbstractASTInjector: void <clinit>()>",
    "<org.codehaus.griffon.compile.core.ast.transform.FXObservableASTTransformation: org.codehaus.groovy.ast.PropertyNode createFXProperty(org.codehaus.groovy.ast.PropertyNode)>",
    "<org.codehaus.griffon.compile.core.ast.transform.FXObservableASTTransformation: void createPropertyAccessor(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.PropertyNode,org.codehaus.groovy.ast.FieldNode,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.InvalidationListenerASTTransformation: void addInvalidationListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.ClosureExpression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.transform.ListChangeListenerASTTransformation: void addListChangeListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.ClosureExpression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.transform.PropertyListenerASTTransformation: void addListenerStatement(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.GriffonArtifactASTInjector: void inject(org.codehaus.groovy.ast.ClassNode,java.lang.String)>",
    "<org.codehaus.griffon.compile.core.ast.transform.FXObservableASTTransformation: void createSetterMethod(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.PropertyNode,java.lang.String,org.codehaus.groovy.ast.stmt.Statement,java.util.List)>",
    "<org.codehaus.griffon.compile.core.ast.transform.AbstractASTTransformation: org.codehaus.groovy.ast.ClassNode makeClassSafeWithGenerics(java.lang.String,java.lang.String[])>",
    "<org.codehaus.griffon.compile.core.ast.transform.MapChangeListenerASTTransformation: void addMapChangeListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.ConstantExpression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: void injectProperty(org.codehaus.groovy.ast.ClassNode,java.lang.String,java.lang.Class,java.lang.Object)>",
    "<org.codehaus.griffon.compile.core.ast.transform.VetoableASTTransformation: void createListenerSetter(org.codehaus.groovy.control.SourceUnit,boolean,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.PropertyNode)>",
    "<org.codehaus.griffon.compile.core.ast.transform.ListChangeListenerASTTransformation: org.codehaus.groovy.ast.expr.ArgumentListExpression createListenerExpression(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.transform.MapChangeListenerASTTransformation: void addListenerToProperty(org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.ast.AnnotationNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.FieldNode)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: void injectProperty(org.codehaus.groovy.ast.ClassNode,java.lang.String,int,java.lang.Class)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.FieldExpression field(org.codehaus.groovy.ast.FieldNode)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.BinaryExpression ne(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.AbstractASTTransformation: org.codehaus.groovy.ast.expr.Expression applicationExpression(org.codehaus.groovy.ast.ClassNode)>",
    "<org.codehaus.griffon.compile.core.ast.transform.InvalidationListenerASTTransformation: org.codehaus.groovy.ast.expr.ArgumentListExpression createListenerExpression(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.transform.ChangeListenerASTTransformation: void addChangeListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.ClosureExpression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.BinaryExpression iof(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.AbstractASTTransformation: void injectApplication(org.codehaus.groovy.ast.ClassNode)>",
    "<org.codehaus.griffon.compile.core.ast.transform.AbstractASTTransformation: org.codehaus.groovy.ast.ClassNode makeClassSafeWithGenerics(java.lang.Class,java.lang.Class[])>",
    "<org.codehaus.griffon.compile.core.ast.transform.AbstractASTInjector: org.codehaus.groovy.ast.ClassNode makeClassSafe(java.lang.Class)>",
    "<org.codehaus.griffon.compile.core.ast.transform.ObservableASTTransformation: void createSetterMethod(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.PropertyNode,java.lang.String,org.codehaus.groovy.ast.stmt.Statement)>",
    "<org.codehaus.griffon.compile.core.ast.transform.EventPublisherASTTransformation: void apply(org.codehaus.groovy.ast.ClassNode,java.lang.String)>",
    "<org.codehaus.griffon.compile.core.ast.transform.MapChangeListenerASTTransformation: org.codehaus.groovy.ast.expr.ArgumentListExpression createListenerExpression(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.StaticMethodCallExpression call(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.ChangeListenerASTTransformation: void addChangeListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.VariableExpression,boolean)>",
    "<org.codehaus.griffon.compile.core.ast.transform.PropertyListenerASTTransformation: void addPropertyChangeListener(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.ClosureExpression)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.stmt.Statement ifs_no_return(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.PropertyListenerASTTransformation: void addListenerToProperty(org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.ast.AnnotationNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.FieldNode)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.stmt.Statement decls(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.transform.AbstractASTInjector: org.codehaus.groovy.ast.expr.FieldExpression injectedField(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,java.lang.String,java.lang.String)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.stmt.Statement ifs(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.ClassExpression classx(java.lang.Class)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.BinaryExpression eq(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.expr.ListExpression listx(org.codehaus.groovy.ast.expr.Expression[])>",
    "<org.codehaus.griffon.compile.core.ast.transform.VetoableASTTransformation: void apply(org.codehaus.groovy.ast.ClassNode)>",
    "<org.codehaus.griffon.compile.core.ast.transform.VetoableASTTransformation: void wrapSetterMethod(org.codehaus.groovy.ast.ClassNode,boolean,java.lang.String)>",
    "<org.codehaus.griffon.compile.core.ast.GriffonASTUtils: org.codehaus.groovy.ast.stmt.Statement ifs_no_return(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement,org.codehaus.groovy.ast.stmt.Statement)>"
  ]
}