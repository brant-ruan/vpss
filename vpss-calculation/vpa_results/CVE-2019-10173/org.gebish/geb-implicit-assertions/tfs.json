{
  "2.2": [
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.StaticMethodCallExpression createRuntimeCall(java.lang.String,org.codehaus.groovy.ast.expr.Expression[])>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression extractRecordedValueExpression(org.codehaus.groovy.ast.expr.Expression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: java.lang.Object getConstantValueOfType(org.codehaus.groovy.ast.expr.Expression,java.lang.Class)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression getTransformableExpression(org.codehaus.groovy.ast.stmt.Statement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure2: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure7: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean requiredOptionSpecifiedAsFalse(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: java.lang.String getOptionName()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure7: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitField(org.codehaus.groovy.ast.FieldNode)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void transformEachStatement(org.codehaus.groovy.ast.expr.ClosureExpression,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression toArgumentArray(org.codehaus.groovy.ast.expr.Expression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitVerifyMethodConditionCall_closure1: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure6: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure6: java.lang.Object doCall(org.codehaus.groovy.ast.stmt.Statement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement maybeTransform(org.codehaus.groovy.ast.stmt.Statement,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void handleWaitingContent(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean lastArgumentIsClosureExpression(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.Runtime: boolean isVoidMethod(java.lang.Object,java.lang.String,java.lang.Object[])>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean isTransformable(org.codehaus.groovy.ast.stmt.ExpressionStatement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitSpockValueRecordMethodCall(java.lang.String,java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void handleWaitConditionContent(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitVerifyMethodConditionCall(java.util.List,int)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement transform(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure4: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: void <init>(java.lang.Object,java.lang.Object,groovy.lang.Reference)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure4: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure2: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitContentDsl(org.codehaus.groovy.ast.expr.ClosureExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void <init>(org.codehaus.groovy.control.SourceUnit)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitVerifyMethodConditionCall_closure1: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure6: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure7: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure4: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void <clinit>()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression option(org.codehaus.groovy.ast.expr.ArgumentListExpression,java.lang.String)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure2: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void compensateForSpockIfNecessary(org.codehaus.groovy.ast.expr.MethodCallExpression)>"
  ],
  "2.3.1": [
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.StaticMethodCallExpression createRuntimeCall(java.lang.String,org.codehaus.groovy.ast.expr.Expression[])>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression extractRecordedValueExpression(org.codehaus.groovy.ast.expr.Expression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: java.lang.Object getConstantValueOfType(org.codehaus.groovy.ast.expr.Expression,java.lang.Class)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression getTransformableExpression(org.codehaus.groovy.ast.stmt.Statement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure2: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure7: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean requiredOptionSpecifiedAsFalse(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: java.lang.String getOptionName()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure7: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitField(org.codehaus.groovy.ast.FieldNode)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void transformEachStatement(org.codehaus.groovy.ast.expr.ClosureExpression,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression toArgumentArray(org.codehaus.groovy.ast.expr.Expression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitVerifyMethodConditionCall_closure1: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure6: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure6: java.lang.Object doCall(org.codehaus.groovy.ast.stmt.Statement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement maybeTransform(org.codehaus.groovy.ast.stmt.Statement,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void handleWaitingContent(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean lastArgumentIsClosureExpression(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.Runtime: boolean isVoidMethod(java.lang.Object,java.lang.String,java.lang.Object[])>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean isTransformable(org.codehaus.groovy.ast.stmt.ExpressionStatement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitSpockValueRecordMethodCall(java.lang.String,java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void handleWaitConditionContent(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitVerifyMethodConditionCall(java.util.List,int)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement transform(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure4: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: void <init>(java.lang.Object,java.lang.Object,groovy.lang.Reference)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure4: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure2: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitContentDsl(org.codehaus.groovy.ast.expr.ClosureExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void <init>(org.codehaus.groovy.control.SourceUnit)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitVerifyMethodConditionCall_closure1: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure6: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure7: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure4: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void <clinit>()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression option(org.codehaus.groovy.ast.expr.ArgumentListExpression,java.lang.String)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure2: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void compensateForSpockIfNecessary(org.codehaus.groovy.ast.expr.MethodCallExpression)>"
  ],
  "2.3": [
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.StaticMethodCallExpression createRuntimeCall(java.lang.String,org.codehaus.groovy.ast.expr.Expression[])>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression extractRecordedValueExpression(org.codehaus.groovy.ast.expr.Expression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: java.lang.Object getConstantValueOfType(org.codehaus.groovy.ast.expr.Expression,java.lang.Class)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression getTransformableExpression(org.codehaus.groovy.ast.stmt.Statement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure2: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure7: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean requiredOptionSpecifiedAsFalse(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: java.lang.String getOptionName()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure7: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitField(org.codehaus.groovy.ast.FieldNode)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void transformEachStatement(org.codehaus.groovy.ast.expr.ClosureExpression,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression toArgumentArray(org.codehaus.groovy.ast.expr.Expression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitVerifyMethodConditionCall_closure1: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure6: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure6: java.lang.Object doCall(org.codehaus.groovy.ast.stmt.Statement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement maybeTransform(org.codehaus.groovy.ast.stmt.Statement,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void handleWaitingContent(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean lastArgumentIsClosureExpression(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.Runtime: boolean isVoidMethod(java.lang.Object,java.lang.String,java.lang.Object[])>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean isTransformable(org.codehaus.groovy.ast.stmt.ExpressionStatement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitSpockValueRecordMethodCall(java.lang.String,java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void handleWaitConditionContent(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitVerifyMethodConditionCall(java.util.List,int)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement transform(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure4: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: void <init>(java.lang.Object,java.lang.Object,groovy.lang.Reference)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure4: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure2: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitContentDsl(org.codehaus.groovy.ast.expr.ClosureExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void <init>(org.codehaus.groovy.control.SourceUnit)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitVerifyMethodConditionCall_closure1: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure6: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure7: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure4: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void <clinit>()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression option(org.codehaus.groovy.ast.expr.ArgumentListExpression,java.lang.String)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure2: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void compensateForSpockIfNecessary(org.codehaus.groovy.ast.expr.MethodCallExpression)>"
  ],
  "4.0-rc-1": [
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.StaticMethodCallExpression createRuntimeCall(java.lang.String,org.codehaus.groovy.ast.expr.Expression[])>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression extractRecordedValueExpression(org.codehaus.groovy.ast.expr.Expression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: java.lang.Object getConstantValueOfType(org.codehaus.groovy.ast.expr.Expression,java.lang.Class)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression getTransformableExpression(org.codehaus.groovy.ast.stmt.Statement)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher$_implicitAssertionsDisabled_closure1: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure7: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean requiredOptionSpecifiedAsFalse(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitField(org.codehaus.groovy.ast.FieldNode)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean isSpockVerifyMethodConditionCall(org.codehaus.groovy.ast.expr.MethodCallExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void transformEachStatement(org.codehaus.groovy.ast.expr.ClosureExpression,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_potentiallyTransform_closure1: java.util.List getArguments()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression toArgumentArray(org.codehaus.groovy.ast.expr.Expression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitVerifyMethodConditionCall_closure2: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean potentiallyTransform(java.lang.String,java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure6: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher: boolean isImplicitlyAsserted(java.lang.String,java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure4: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement maybeTransform(org.codehaus.groovy.ast.stmt.Statement,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_potentiallyTransform_closure1: void <init>(java.lang.Object,java.lang.Object,groovy.lang.Reference,groovy.lang.Reference)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void handleWaitingContent(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean lastArgumentIsClosureExpression(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.Runtime: boolean isVoidMethod(java.lang.Object,java.lang.String,java.lang.Object[])>",
    "<geb.transform.implicitassertions.ByNameImplicitlyAssertedMethodCallMatcher: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure4: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void compensateForSpock(org.codehaus.groovy.ast.expr.MethodCallExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean isTransformable(org.codehaus.groovy.ast.stmt.ExpressionStatement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure7: java.lang.Object doCall(org.codehaus.groovy.ast.stmt.Statement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure9: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher$_implicitAssertionsDisabled_closure1: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void handleWaitConditionContent(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitVerifyMethodConditionCall(java.util.List,int)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitVerifyMethodConditionCall_closure2: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure6: void <init>(java.lang.Object,java.lang.Object,groovy.lang.Reference)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean lastArgumentIsClosureExpression(java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure6: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement transform(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher: void <init>(java.lang.String)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure6: java.lang.String getOptionName()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitContentDsl(org.codehaus.groovy.ast.expr.ClosureExpression)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure4: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement wrapInVoidMethodCheck(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.BlockStatement,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure9: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher: boolean implicitAssertionsDisabled(java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure7: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_potentiallyTransform_closure1: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher$_implicitAssertionsDisabled_closure1: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ByNameImplicitlyAssertedMethodCallMatcher: boolean isImplicitlyAsserted(java.lang.String,java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void <clinit>()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression option(org.codehaus.groovy.ast.expr.ArgumentListExpression,java.lang.String)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_potentiallyTransform_closure1: java.lang.String getMethodName()>"
  ],
  "4.0": [
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.StaticMethodCallExpression createRuntimeCall(java.lang.String,org.codehaus.groovy.ast.expr.Expression[])>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression extractRecordedValueExpression(org.codehaus.groovy.ast.expr.Expression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: java.lang.Object getConstantValueOfType(org.codehaus.groovy.ast.expr.Expression,java.lang.Class)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression getTransformableExpression(org.codehaus.groovy.ast.stmt.Statement)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher$_implicitAssertionsDisabled_closure1: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure7: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean requiredOptionSpecifiedAsFalse(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitField(org.codehaus.groovy.ast.FieldNode)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean isSpockVerifyMethodConditionCall(org.codehaus.groovy.ast.expr.MethodCallExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void transformEachStatement(org.codehaus.groovy.ast.expr.ClosureExpression,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_potentiallyTransform_closure1: java.util.List getArguments()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression toArgumentArray(org.codehaus.groovy.ast.expr.Expression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitVerifyMethodConditionCall_closure2: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean potentiallyTransform(java.lang.String,java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure6: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher: boolean isImplicitlyAsserted(java.lang.String,java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure4: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement maybeTransform(org.codehaus.groovy.ast.stmt.Statement,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_potentiallyTransform_closure1: void <init>(java.lang.Object,java.lang.Object,groovy.lang.Reference,groovy.lang.Reference)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void handleWaitingContent(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean lastArgumentIsClosureExpression(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.Runtime: boolean isVoidMethod(java.lang.Object,java.lang.String,java.lang.Object[])>",
    "<geb.transform.implicitassertions.ByNameImplicitlyAssertedMethodCallMatcher: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure4: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void compensateForSpock(org.codehaus.groovy.ast.expr.MethodCallExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean isTransformable(org.codehaus.groovy.ast.stmt.ExpressionStatement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure7: java.lang.Object doCall(org.codehaus.groovy.ast.stmt.Statement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure9: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher$_implicitAssertionsDisabled_closure1: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void handleWaitConditionContent(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitVerifyMethodConditionCall(java.util.List,int)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitVerifyMethodConditionCall_closure2: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure6: void <init>(java.lang.Object,java.lang.Object,groovy.lang.Reference)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean lastArgumentIsClosureExpression(java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure6: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement transform(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher: void <init>(java.lang.String)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure6: java.lang.String getOptionName()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitContentDsl(org.codehaus.groovy.ast.expr.ClosureExpression)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure4: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement wrapInVoidMethodCheck(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.BlockStatement,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure9: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher: boolean implicitAssertionsDisabled(java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure7: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_potentiallyTransform_closure1: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher$_implicitAssertionsDisabled_closure1: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ByNameImplicitlyAssertedMethodCallMatcher: boolean isImplicitlyAsserted(java.lang.String,java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void <clinit>()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression option(org.codehaus.groovy.ast.expr.ArgumentListExpression,java.lang.String)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_potentiallyTransform_closure1: java.lang.String getMethodName()>"
  ],
  "4.1": [
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.StaticMethodCallExpression createRuntimeCall(java.lang.String,org.codehaus.groovy.ast.expr.Expression[])>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression extractRecordedValueExpression(org.codehaus.groovy.ast.expr.Expression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: java.lang.Object getConstantValueOfType(org.codehaus.groovy.ast.expr.Expression,java.lang.Class)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression getTransformableExpression(org.codehaus.groovy.ast.stmt.Statement)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher$_implicitAssertionsDisabled_closure1: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure7: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean requiredOptionSpecifiedAsFalse(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitField(org.codehaus.groovy.ast.FieldNode)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean isSpockVerifyMethodConditionCall(org.codehaus.groovy.ast.expr.MethodCallExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void transformEachStatement(org.codehaus.groovy.ast.expr.ClosureExpression,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_potentiallyTransform_closure1: java.util.List getArguments()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression toArgumentArray(org.codehaus.groovy.ast.expr.Expression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitVerifyMethodConditionCall_closure2: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean potentiallyTransform(java.lang.String,java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure6: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher: boolean isImplicitlyAsserted(java.lang.String,java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure4: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement maybeTransform(org.codehaus.groovy.ast.stmt.Statement,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_potentiallyTransform_closure1: void <init>(java.lang.Object,java.lang.Object,groovy.lang.Reference,groovy.lang.Reference)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void handleWaitingContent(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean lastArgumentIsClosureExpression(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.Runtime: boolean isVoidMethod(java.lang.Object,java.lang.String,java.lang.Object[])>",
    "<geb.transform.implicitassertions.ByNameImplicitlyAssertedMethodCallMatcher: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure4: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void compensateForSpock(org.codehaus.groovy.ast.expr.MethodCallExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean isTransformable(org.codehaus.groovy.ast.stmt.ExpressionStatement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure7: java.lang.Object doCall(org.codehaus.groovy.ast.stmt.Statement)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure9: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher$_implicitAssertionsDisabled_closure1: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure3: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void handleWaitConditionContent(org.codehaus.groovy.ast.expr.ArgumentListExpression)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitVerifyMethodConditionCall(java.util.List,int)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitVerifyMethodConditionCall_closure2: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure6: void <init>(java.lang.Object,java.lang.Object,groovy.lang.Reference)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: boolean lastArgumentIsClosureExpression(java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure6: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement transform(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure8: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher: void <init>(java.lang.String)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure6: java.lang.String getOptionName()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void visitContentDsl(org.codehaus.groovy.ast.expr.ClosureExpression)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_requiredOptionSpecifiedAsFalse_closure4: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.stmt.Statement wrapInVoidMethodCheck(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.BlockStatement,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,boolean)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_toArgumentArray_closure9: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher: boolean implicitAssertionsDisabled(java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_visitContentDsl_closure7: void <init>(java.lang.Object,java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_potentiallyTransform_closure1: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ConfigurableByNameImplicitlyAssertedMethodCallMatcher$_implicitAssertionsDisabled_closure1: groovy.lang.MetaClass $getStaticMetaClass()>",
    "<geb.transform.implicitassertions.ByNameImplicitlyAssertedMethodCallMatcher: boolean isImplicitlyAsserted(java.lang.String,java.util.List)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_option_closure5: java.lang.Object doCall(java.lang.Object)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: void <clinit>()>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor: org.codehaus.groovy.ast.expr.Expression option(org.codehaus.groovy.ast.expr.ArgumentListExpression,java.lang.String)>",
    "<geb.transform.implicitassertions.ImplicitAssertionsTransformationVisitor$_potentiallyTransform_closure1: java.lang.String getMethodName()>"
  ]
}