{
  "6.0.11": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$2(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__550: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.0.8": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.lang.Object lambda$new$0(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$8(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$3(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$3(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isServiceRoad(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$4(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$4(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.2.2": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple lambda$new$3(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__340: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$7(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$4(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$5(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.0.7": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$10(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$13(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$7(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$6(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$2(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$2(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$14(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__533: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.0.8": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$10(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$13(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$7(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$6(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$2(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$2(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$14(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__542: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.3.1": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean intersectingWithMoreThan(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Set getOsmEdges(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteMasterRelation$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean isTurningCircle(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.LongNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean isConnectorWayToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.stream.Stream lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: void lambda$flag$2(java.util.Set,java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.ImproperAndUnknownRoadNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__34: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$routeSetMemberRelations$6(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteRelation$4(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SourceMaxspeedCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__807: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayAccessCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__30: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__38: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.FixMeReviewCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__676: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConstructionCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__767: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.3.0": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__345: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean intersectingWithMoreThan(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Set getOsmEdges(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteMasterRelation$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__1063: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean isTurningCircle(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.LongNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean isConnectorWayToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.stream.Stream lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: void lambda$flag$2(java.util.Set,java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__1055: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.ImproperAndUnknownRoadNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$routeSetMemberRelations$6(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__1059: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteRelation$4(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SourceMaxspeedCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayAccessCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.FixMeReviewCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__525: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__317: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConstructionCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.3.2": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean intersectingWithMoreThan(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Set getOsmEdges(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteMasterRelation$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean isTurningCircle(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.LongNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__21: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean isConnectorWayToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.stream.Stream lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: void lambda$flag$2(java.util.Set,java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.ImproperAndUnknownRoadNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$routeSetMemberRelations$6(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__635: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteRelation$4(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__979: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SourceMaxspeedCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayAccessCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__849: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.FixMeReviewCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConstructionCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__26: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag flagIncline(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.Location,org.openstreetmap.atlas.geography.Location)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$7(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__17: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.3.3": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__151: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean intersectingWithMoreThan(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Set getOsmEdges(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteMasterRelation$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean isTurningCircle(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.LongNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean isConnectorWayToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.stream.Stream lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: void lambda$flag$2(java.util.Set,java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.ImproperAndUnknownRoadNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$routeSetMemberRelations$6(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteRelation$4(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SourceMaxspeedCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayAccessCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__358: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__142: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.FixMeReviewCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__403: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__834: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConstructionCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag flagIncline(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.Location,org.openstreetmap.atlas.geography.Location)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__146: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$7(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.2.1": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__445: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$3(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__518: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__144: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__140: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__136: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.2.2": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__151: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__143: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__459: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__532: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__649: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__147: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.13": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__141: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__809: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__813: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getComplexFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__51: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__805: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.0.6": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.lang.Object lambda$new$0(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$8(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$3(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$3(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isServiceRoad(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$4(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$4(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.0.5": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$1(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.lang.Object lambda$new$0(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$8(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$3(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$3(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isServiceRoad(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$4(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$4(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$4(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.List findFirstRampEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,long)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>"
  ],
  "5.0.4": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$1(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.lang.Object lambda$new$0(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$8(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$3(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$3(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isServiceRoad(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$4(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$4(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$4(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.List findFirstRampEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,long)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>"
  ],
  "5.0.7": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.lang.Object lambda$new$0(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$8(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$3(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$3(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isServiceRoad(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$4(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$4(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.0.3": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$1(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.lang.Object lambda$new$0(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$8(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$3(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$3(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isServiceRoad(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$4(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$4(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$4(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.List findFirstRampEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,long)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>"
  ],
  "6.3.7": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__530: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Set getOsmEdges(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean isTurningCircle(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutHighwayTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__232: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__975: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteMasterRelation$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: void lambda$flag$2(java.util.Set,java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__971: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean isDualCarriageWay(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__980: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteRelation$4(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SourceMaxspeedCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean isWaterWay(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ImproperAndUnknownRoadNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean isSlipway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.FixMeReviewCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag flagIncline(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.Location,org.openstreetmap.atlas.geography.Location)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean isWaterwayToCheck(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean intersectingWithMoreThan(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.LongNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.stream.Stream lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$routeSetMemberRelations$6(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayAccessCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConstructionCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional generateFlag(org.openstreetmap.atlas.geography.atlas.items.Edge,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__349: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$7(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean isConnectorWayToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>"
  ],
  "6.3.8": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Set getOsmEdges(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean isTurningCircle(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutHighwayTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__75: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__464: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteMasterRelation$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__616: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__79: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: void lambda$flag$2(java.util.Set,java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean isDualCarriageWay(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteRelation$4(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SourceMaxspeedCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean isWaterWay(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__84: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ImproperAndUnknownRoadNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean isSlipway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.FixMeReviewCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag flagIncline(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.Location,org.openstreetmap.atlas.geography.Location)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedAddressStreetCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean isWaterwayToCheck(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean intersectingWithMoreThan(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.LongNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.stream.Stream lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$routeSetMemberRelations$6(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayAccessCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConstructionCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional generateFlag(org.openstreetmap.atlas.geography.atlas.items.Edge,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__774: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$7(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean isConnectorWayToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>"
  ],
  "6.3.4": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__945: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__898: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean intersectingWithMoreThan(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Set getOsmEdges(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteMasterRelation$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean isTurningCircle(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.LongNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__402: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean isConnectorWayToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__940: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.stream.Stream lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: void lambda$flag$2(java.util.Set,java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.ImproperAndUnknownRoadNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean isDualCarriageWay(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$routeSetMemberRelations$6(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteRelation$4(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SourceMaxspeedCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__359: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayAccessCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.FixMeReviewCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__936: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConstructionCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag flagIncline(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.Location,org.openstreetmap.atlas.geography.Location)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional generateFlag(org.openstreetmap.atlas.geography.atlas.items.Edge,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$7(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.3.5": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__945: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__898: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean intersectingWithMoreThan(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Set getOsmEdges(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteMasterRelation$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean isTurningCircle(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.LongNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__402: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean isConnectorWayToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__940: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.stream.Stream lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: void lambda$flag$2(java.util.Set,java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.ImproperAndUnknownRoadNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean isDualCarriageWay(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$routeSetMemberRelations$6(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteRelation$4(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SourceMaxspeedCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__359: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayAccessCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.FixMeReviewCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__936: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConstructionCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag flagIncline(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.Location,org.openstreetmap.atlas.geography.Location)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional generateFlag(org.openstreetmap.atlas.geography.atlas.items.Edge,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$7(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.3.9": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Set getOsmEdges(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean isTurningCircle(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.Set getIntersection(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutHighwayTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__75: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteMasterRelation$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__79: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: void lambda$flag$2(java.util.Set,java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean isDualCarriageWay(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteRelation$4(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SourceMaxspeedCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean isWaterWay(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__618: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__84: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ImproperAndUnknownRoadNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean isSlipway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.FixMeReviewCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag flagIncline(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.Location,org.openstreetmap.atlas.geography.Location)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedAddressStreetCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean isWaterwayToCheck(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean intersectingWithMoreThan(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.LongNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.stream.Stream lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$routeSetMemberRelations$6(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__776: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__466: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayAccessCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConstructionCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional generateFlag(org.openstreetmap.atlas.geography.atlas.items.Edge,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$7(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean isConnectorWayToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>"
  ],
  "6.3.10": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__1054: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Set getOsmEdges(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__708: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean isTurningCircle(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.Set getIntersection(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutHighwayTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__1050: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteMasterRelation$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: void lambda$flag$2(java.util.Set,java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean isDualCarriageWay(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean intersectsAirport(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteRelation$4(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SourceMaxspeedCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean isWaterWay(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ImproperAndUnknownRoadNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean isSlipway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__315: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$3(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.FixMeReviewCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag flagIncline(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.Location,org.openstreetmap.atlas.geography.Location)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedAddressStreetCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.HighwayIntersectionCheck: boolean isWaterwayToCheck(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean intersectingWithMoreThan(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.LongNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$edgeCharacteristicsToIgnore$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.stream.Stream lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$routeSetMemberRelations$6(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__814: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayAccessCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConstructionCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional generateFlag(org.openstreetmap.atlas.geography.atlas.items.Edge,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: java.lang.String getCarAccess(org.openstreetmap.atlas.geography.atlas.items.Edge,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$7(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__1059: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean isConnectorWayToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>"
  ],
  "6.3.6": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__467: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__181: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean intersectingWithMoreThan(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Set getOsmEdges(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteMasterRelation$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean isTurningCircle(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.LongNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__626: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean isConnectorWayToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.stream.Stream lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: void lambda$flag$2(java.util.Set,java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoadLinkCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__177: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.ImproperAndUnknownRoadNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean isDualCarriageWay(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$routeSetMemberRelations$6(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__186: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutHighwayTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__276: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean lambda$processRouteRelation$4(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SourceMaxspeedCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayAccessCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.FixMeReviewCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConstructionCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag flagIncline(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.Location,org.openstreetmap.atlas.geography.Location)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SeparateSidewalkTagCheck: java.util.Optional generateFlag(org.openstreetmap.atlas.geography.atlas.items.Edge,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTurnLanesValueCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$7(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.relations.RouteRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: org.openstreetmap.atlas.checks.flag.CheckFlag createFlag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.0.0": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple lambda$new$3(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkClosedLoop(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__407: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$7(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$5(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.0.1": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple lambda$new$3(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkClosedLoop(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$10(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$13(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$7(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$6(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__440: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$2(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$14(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.10": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__646: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__714: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.9": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__705: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__637: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.1.0": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.lang.Object lambda$new$0(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$8(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$3(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$3(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isServiceRoad(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$4(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$4(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.0.10": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.lang.Object lambda$new$0(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$8(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$3(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$3(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isServiceRoad(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$4(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$4(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.1.1": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.lang.Object lambda$new$0(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$8(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$3(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$3(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isServiceRoad(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$4(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$4(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.0.9": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.lang.Object lambda$new$0(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$8(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$3(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$3(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isServiceRoad(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$4(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$4(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.1.2": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.lang.Object lambda$new$0(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$8(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$3(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$3(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isServiceRoad(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$4(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.17": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__382: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__62: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__58: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$3(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__267: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__54: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.18": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__382: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__62: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__58: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$3(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__267: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__54: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.15": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__916: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__908: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__912: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__392: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__348: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.16": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$3(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__96: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__88: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__462: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__542: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__92: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.0.2": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple lambda$new$3(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkClosedLoop(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$10(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$13(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$7(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$4(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__501: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$6(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$2(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$14(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$1(boolean,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.1.9": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__296: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$7(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$5(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.1.8": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$7(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__275: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$5(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.1.7": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$7(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$5(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.1": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$2(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__650: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__582: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.0": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$2(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__550: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.2.3": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple lambda$new$3(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkClosedLoop(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__407: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$7(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$5(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.4": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__583: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$2(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__651: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.3": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__583: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$2(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__651: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.0.3": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple lambda$new$3(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkClosedLoop(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$10(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$13(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$7(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$4(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__501: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$6(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$2(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$14(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$1(boolean,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.0.4": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple lambda$new$3(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkClosedLoop(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$10(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$13(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$7(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$4(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__501: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$6(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$2(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$14(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$1(boolean,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.14": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__900: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__896: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getComplexFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__904: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__341: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__385: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.2.6.1": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__996: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__368: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__117: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__1000: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__176: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__1004: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.2.5": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__338: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__36: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__733: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__32: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__40: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__193: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.2.6.2": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__938: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__942: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__946: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__596: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__183: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__317: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.2.6": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsTunnel(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__996: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.feature_change.IFeatureChange: org.openstreetmap.atlas.geography.atlas.change.FeatureChange createFeatureChange(java.util.function.BiFunction,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Collection)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.utility.KeyFullyCheckedUtils: void getTagFromFieldTaggable(java.lang.reflect.Field,java.lang.Object,java.util.List,java.util.List)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck$add__368: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__117: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean objectIsBridge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.GenericTagCheck: boolean checkCountrySpecific(java.util.Map,org.openstreetmap.atlas.tags.Taggable,java.util.Map$Entry,org.openstreetmap.atlas.checks.database.wikidata.WikiData)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$16(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__1000: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean highwayNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean properWithoutLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__176: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean isValidTopology(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean waterNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$5(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__1004: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean naturalNotOnGround(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.2.1": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__340: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$7(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$4(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$5(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.2.0": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__296: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$7(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$5(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.7": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__633: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__701: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.6": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__630: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$2(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__698: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.2.0": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$3(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__866: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isCrossingHighwayType(org.openstreetmap.atlas.geography.atlas.items.Edge,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Node,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__862: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__858: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.PolyLine,java.lang.Long,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__680: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$13(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectionAtDifferentLayersCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__560: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.19": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$3(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__96: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__734: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__100: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__573: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__92: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.11": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$2(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$6(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__716: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$4(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__646: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.21": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$3(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__549: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__847: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__851: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__669: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__855: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.20": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$3(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__437: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__253: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__249: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__320: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__257: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.1.21.1": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isHighwayWithoutMaxHeight(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagNonNodeTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidCharacterNameTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean lastEdgeEndNodeEdgesHighwayTage(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean firstEdgeStartNodeEdgesHighwayTags(org.openstreetmap.atlas.tags.HighwayTag,java.util.Set,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration,org.openstreetmap.atlas.checks.base.ExternalDataFetcher)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayMissingNameAndRefTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.Optional flagIncorrectlyTagged(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.OpenBoundaryCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$3(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$3(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__549: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$3(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$10(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: java.util.List missingNodesAtIntersectionOnSameLayer(org.openstreetmap.atlas.geography.atlas.items.Line,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean lambda$isBuildingRelationMember$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$18(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter: java.util.stream.Stream lambda$convertFixSuggestions$6(java.util.Map,java.util.Map$Entry)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.BridgeDetailedInfoCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$hasInconsistentTollTag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BoundaryIntersectionCheck: boolean isRelationTypeBoundaryWithBoundaryTag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasSameHighwayTag(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__847: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$14(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$19(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Node,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck$NodeCheck isValidLevelCrossingNode(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: org.openstreetmap.atlas.checks.flag.CheckFlag lambda$flag$0(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.SimilarTagValueCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.flag.serializer.CheckFlagDeserializer: java.util.Optional getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,com.google.gson.JsonObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: java.util.Set getHighwayTags(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$5(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__851: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean ignoreWay(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$7(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$9(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TunnelBridgeHeightLimitCheck: boolean isCovered(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$5(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: java.util.Iterator lambda$produceFlags$2d1f3df5$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck: boolean lambda$getIntersectingWaterways$8(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ConcerningAngleBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.WaterWayCheck$isBoundaryNode__669: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.TallBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getInEdges$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnknownHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: org.openstreetmap.atlas.geography.atlas.change.FeatureChange getFixSuggestion(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,boolean)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$2(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.utility.OpenStreetMapCheckFlagConverter$append__855: java.lang.Object apply(java.lang.Object,java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.utility.CommonMethods: org.openstreetmap.atlas.geography.PolyLine buildOriginalOsmWayGeometry(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean lambda$getOutEdges$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterAreaCheck: void lambda$new$4(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SuddenHighwayTypeChangeCheck: boolean edgeIsRoundaboutOrCircular(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$15(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LevelCrossingOnRailwayCheck: boolean lambda$isValidLevelCrossingNode$4(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.TollValidationCheck: boolean hasInconsistentTollTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.1.6": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean lambda$validCheckForObject$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$7(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$5(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.1.4": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean lambda$validCheckForObject$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$7(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$5(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.1.5": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean lambda$validCheckForObject$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$7(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$5(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.0.9": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$10(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$13(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$7(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$6(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$2(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$2(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$14(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__545: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.0.5": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$10(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$13(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$7(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$6(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$2(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$2(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$14(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__524: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.0.6": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$10(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$13(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$7(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$6(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$2(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$2(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__526: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$14(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$2(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "5.1.3": [
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.lang.Object lambda$new$0(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean lambda$validCheckForObject$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$7(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$4(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$5(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ],
  "6.0.10": [
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressPointMatchCheck: boolean lambda$hasAssociatedStreetRelation$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutMissingTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$isWithinAreasWithExcludedAmenityTags$8(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$1(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.distributed.RunnableCheckBase: void uploadTasks()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Set filterConnectedEdgesToCandidates(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$4(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean isValidCrossingEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: boolean isUnacceptableAreaHighwayTagCombination(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.tags.HighwayTag)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: boolean lambda$getInvalidCrossingEdges$11(org.openstreetmap.atlas.geography.PolyLine,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasNoAccessConnection$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isPedestrianArea(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.AreasWithHighwayTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.SelfIntersectingPolylineCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$11(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: boolean isAFormOfRoundabout(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.utility.tags.SyntheticHighlightPointTag: boolean isYes(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$pierOverlapsHighway$15(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,boolean,org.openstreetmap.atlas.geography.Polygon,java.util.List,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$buildRelationSpatialIndex$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$isRoundaboutEdge$10(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.AbbreviatedNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$populateInEdgeToOutEdgeMaps$13(java.util.List,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$9(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.geometry.InvalidGeometryCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$getFlaggedIntersection$7(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.AtlasEntity,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.points.InvalidMiniRoundaboutCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean validEdge(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$6(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$4(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean lambda$intersectsAirport$0(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$12(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional checkGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$isRoundaboutEdge$3(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas load(java.lang.String,java.lang.String,java.util.function.Consumer)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$3(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <clinit>()>",
    "<org.openstreetmap.atlas.checks.distributed.AtlasDataSource: org.openstreetmap.atlas.geography.atlas.Atlas loadPbf(org.openstreetmap.atlas.streaming.resource.Resource,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.commands.AtlasChecksCommand: void main(java.lang.String[])>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InconsistentRoadClassificationCheck: boolean lambda$allConnectedEdgesFilter$3(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.tags.HighwayTag,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isNotOnSyntheticBoundary(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: void start(org.openstreetmap.atlas.utilities.runtime.CommandMap)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: org.openstreetmap.atlas.geography.Rectangle bounds()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$isOffendingLineItem$13(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: boolean isMultipolygonRelation()>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$ignoreTags$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.geography.atlas.items.Route lambda$toRoute$11(java.util.Set)>",
    "<org.openstreetmap.atlas.checks.base.BaseCheck: boolean lambda$checkObjectFilter$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SnakeRoadCheck: boolean isValidEdgeToConsider(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean neighboringPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,java.util.Set)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$hasReverseCarriageway$8(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.geography.MultiPolygon relationGeometry(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$2(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.flag.CheckFlag: com.google.gson.JsonObject boundsGeoJsonGeometry()>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$0(org.openstreetmap.atlas.geography.atlas.items.LineItem,org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getFlaggedIntersection$6(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$8(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.tags.filters.TaggableFilter lambda$getFiltersFromResource$2(com.google.gson.JsonElement)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isMinimumHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: boolean lambda$hasConstructionConnection$1(org.openstreetmap.atlas.geography.atlas.items.Line)>",
    "<org.openstreetmap.atlas.checks.validation.linear.lines.GeneralizedCoastlineCheck: boolean isCoastline(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$5(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SingleSegmentMotorwayCheck: boolean isMotorwayNotRoundabout(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$flag$1(java.util.Set,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean canCrossBuilding(org.openstreetmap.atlas.geography.atlas.items.AtlasItem)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean validEdgeFilter(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingBuildingCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMatchingOutEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean lambda$isInMilitaryArea$1(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$isInvalidlyInteractingWithOcean$7(org.openstreetmap.atlas.geography.PolyLine,org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean lambda$isMemberOfRelationWithWaterTag$0(org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean lambda$getAllRoundaboutEdgesMissingTagsOrRelations$2(org.openstreetmap.atlas.geography.atlas.items.AtlasEntity)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.HighwayToFerryTagCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean differentLayersIntersect(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: boolean lambda$flag$0(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.RoadNameGapCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean lambda$roundaboutEnclosesRoads$5(org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPoint: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.AddressStreetNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: java.util.HashSet connectedInvalidLanes(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PoolSizeCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ApproximateWayCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isOfSameElevation(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BigNodeBadDataCheck: boolean lambda$containsNonPriorityHighways$5(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void lambda$getLayerMap$6(java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean lambda$static$1(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: void lambda$populateInEdgeToOutEdgeMaps$14(java.util.Set,java.util.Map,java.util.Map,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutClosedLoopCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: boolean lambda$flag$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.GeometricSurface,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedPolyline: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidTurnRestrictionCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: void lambda$flag$1(org.openstreetmap.atlas.checks.flag.CheckFlag,org.openstreetmap.atlas.geography.atlas.items.Node)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingAreaTagCombination: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.points.ConnectivityCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.StreetNameIntegersOnlyCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean areOnSameLevelOrLayer(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.IntegrityCheckSparkJob: void executeChecks(java.lang.String,org.openstreetmap.atlas.geography.atlas.Atlas,java.util.Set,org.openstreetmap.atlas.checks.maproulette.MapRouletteConfiguration)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean lambda$isBuildingRelationMember$5(org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Relation)>",
    "<org.openstreetmap.atlas.checks.validation.linear.MalformedPolyLineCheck: boolean isComplexPolyLine(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutConnectorCheck$isRoundabout__544: boolean test(java.lang.Object)>",
    "<org.openstreetmap.atlas.checks.validation.areas.SpikyBuildingCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidSignBoardRelationCheck: org.openstreetmap.atlas.utilities.tuples.Tuple fromRoute(java.util.List,long)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean lambda$static$0(org.openstreetmap.atlas.tags.Taggable)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$7(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$1(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$flag$4(org.openstreetmap.atlas.geography.atlas.items.Edge,java.util.Optional,java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.LineCrossingWaterBodyCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.validation.tag.MixedCaseNameCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.LongSegmentCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean lambda$intersectsAirportOrBuilding$6(org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.points.NodeValenceCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.distributed.ShardedIntegrityChecksSparkJob: scala.Tuple2 lambda$produceFlags$7fe438cb$1(java.lang.String,java.util.Map,boolean,org.apache.spark.broadcast.Broadcast,org.openstreetmap.atlas.utilities.scalars.Distance,org.openstreetmap.atlas.generator.tools.spark.utilities.SparkFileHelper,java.lang.String,org.openstreetmap.atlas.checks.distributed.ShardedCheckFlagsTask)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ValenceOneImportantRoadCheck: long directionalValence(org.openstreetmap.atlas.geography.atlas.items.Node,java.lang.Boolean)>",
    "<org.openstreetmap.atlas.checks.validation.tag.ConflictingTagCombinationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.RoundaboutValenceCheck: boolean lambda$isRoundaboutEdge$2(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isMissingDestinationTag(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: java.util.Optional flag(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.flag.FlaggedRelation: org.openstreetmap.atlas.checks.flag.FlaggedObject getAsCompleteFlaggedObject()>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean hasMinKey(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isNavigable(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.tag.UnusualLayerTagsCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.OverlappingAOIPolygonCheck: void lambda$new$0(java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.areas.ShadowDetectionCheck: boolean isBuildingOrPart(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean isValidMultiPolygonRelationMember(org.openstreetmap.atlas.geography.atlas.items.RelationMember)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.IntersectingBuildingsCheck: boolean lambda$flag$0(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$3(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.areas.PedestrianAreaOverlappingEdgeCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.ShortSegmentCheck: boolean isGateLike(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.OverlappingEdgeCheck: boolean edgeIsArea(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean endOrStartNodeHasAmenityTypeToExclude(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidAccessTagCheck: boolean isInMilitaryArea(org.openstreetmap.atlas.geography.atlas.items.LineItem)>",
    "<org.openstreetmap.atlas.checks.validation.areas.WaterbodyAndIslandSizeCheck: boolean lambda$static$0(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.DuplicateWaysCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.AtGradeSignPostCheck: boolean isValidIntersectingEdge(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$2(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean isAccessible(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: void <init>(org.openstreetmap.atlas.utilities.configuration.Configuration)>",
    "<org.openstreetmap.atlas.checks.configuration.ConfigurationResolver: org.openstreetmap.atlas.utilities.configuration.Configuration loadConfiguration(org.openstreetmap.atlas.utilities.runtime.CommandMap,org.openstreetmap.atlas.utilities.runtime.Command$Switch,org.openstreetmap.atlas.utilities.runtime.Command$Switch)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.FloatingEdgeCheck: boolean isMinimumHighwayType(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$validCheckForObject$3(org.openstreetmap.atlas.geography.atlas.items.Point)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.UnwalkableWaysCheck: boolean lambda$filterConnectedEdgesToCandidates$5(java.util.Optional,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SinkIslandCheck: boolean edgeCharacteristicsToIgnore(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.BuildingRoadIntersectionCheck: boolean lambda$intersectsCoreWayInvalidly$4(org.openstreetmap.atlas.geography.atlas.items.Area,org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean isExcludedHighway(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidTagsCheck: org.openstreetmap.atlas.utilities.tuples.Tuple stringsToClassTagFilter(java.lang.String,java.lang.String)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.EdgeCrossingEdgeCheck: java.util.stream.Stream lambda$getInvalidCrossingEdges$12(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.intersections.OceanBleedingCheck: boolean lambda$flag$2(boolean,org.openstreetmap.atlas.geography.Polygon,org.openstreetmap.atlas.geography.atlas.items.AtlasObject,org.openstreetmap.atlas.geography.atlas.items.Area)>",
    "<org.openstreetmap.atlas.checks.validation.tag.InvalidLanesTagCheck: boolean partOfTollBooth(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.InvalidPiersCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.atlas.predicates.TagPredicates: boolean lambda$static$10(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.relations.InvalidMultiPolygonRelationCheck: boolean validCheckForObject(org.openstreetmap.atlas.geography.atlas.items.AtlasObject)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.MalformedRoundaboutCheck: boolean ignoreBridgeTunnelCrossings(org.openstreetmap.atlas.geography.atlas.items.Edge)>",
    "<org.openstreetmap.atlas.checks.validation.linear.edges.SignPostCheck: boolean lambda$flag$2(org.openstreetmap.atlas.geography.atlas.items.Relation)>"
  ]
}